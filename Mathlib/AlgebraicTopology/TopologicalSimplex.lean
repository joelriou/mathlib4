/-
Copyright (c) 2021 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin, Adam Topaz, Jo√´l Riou
-/
import Mathlib.Analysis.Convex.Combination
import Mathlib.Analysis.Normed.Module.Basic
import Mathlib.Algebra.BigOperators.Ring.Finset
import Mathlib.AlgebraicTopology.SimplicialObject.Basic
import Mathlib.Topology.Category.TopCat.ULift
import Mathlib.Topology.Connected.PathConnected

/-!
# Topological simplices

We define the natural functor from `SimplexCategory` to `TopCat` sending `‚¶ãn‚¶å` to the
topological `n`-simplex.
This is used to define `TopCat.toSSet` in `AlgebraicTopology.SingularSet`.
-/

universe u

open CategoryTheory Simplicial

section

namespace Convex

section

variable {ùïú E Œπ : Type*} [Field ùïú] [LinearOrder ùïú] [IsStrictOrderedRing ùïú]
  [AddCommGroup E] [Module ùïú E] {s : Set E} (hs : Convex ùïú s)
  (t : Finset Œπ) (p : Œπ ‚Üí s) (w : Œπ ‚Üí ùïú) (hw‚ÇÄ : ‚àÄ i, 0 ‚â§ w i) (hw‚ÇÅ : t.sum w = 1)

include hw‚ÇÄ hw‚ÇÅ hs

lemma finsetAffineCombination_mem :
    Finset.affineCombination ùïú t (fun i ‚Ü¶ (p i).1) w ‚àà s :=
  hs.convexHull_eq.subset
    (convexHull_mono (by grind) (affineCombination_mem_convexHull (by tauto) hw‚ÇÅ))

@[simps]
noncomputable def affineCombination : s :=
  ‚ü®_, hs.finsetAffineCombination_mem t p w hw‚ÇÄ hw‚ÇÅ‚ü©

end

section

open unitInterval

@[simps]
def fromUnitInterval {E : Type*} [AddCommGroup E] [Module ‚Ñù E] {s : Set E} (hs : Convex ‚Ñù s)
    (x‚ÇÄ x‚ÇÅ : s) (t : I) : s :=
  ‚ü®(1 - t.1) ‚Ä¢ x‚ÇÄ + t.1 ‚Ä¢ x‚ÇÅ, by
    apply hs.starConvex x‚ÇÄ.2 x‚ÇÅ.2
    all_goals grind‚ü©

@[continuity]
lemma continuous_fromUnitInterval {E : Type*} [SeminormedAddCommGroup E] [NormedSpace ‚Ñù E]
    {s : Set E} (hs : Convex ‚Ñù s) (x‚ÇÄ x‚ÇÅ : s) :
    Continuous (fromUnitInterval hs x‚ÇÄ x‚ÇÅ) :=
  Continuous.subtype_mk (by continuity) _

end

end Convex

end

section

variable (X Y Z : Type*) [Fintype X] [Fintype Y] [Fintype Z]

/-- The simplex with a given type of vertices `X`. -/
def topologicalSimplex : Set (X ‚Üí ‚Ñù) := setOf (fun f ‚Ü¶ (‚àÄ i, 0 ‚â§ f i) ‚àß ‚àë i, f i = 1)

variable {X} in
lemma mem_topologicalSimplex_iff (f : X ‚Üí ‚Ñù) :
    f ‚àà topologicalSimplex X ‚Üî (‚àÄ i, 0 ‚â§ f i) ‚àß ‚àë i, f i = 1 := Iff.rfl

/-- The simplex with a given type of vertices `X`, as a type. -/
abbrev TopologicalSimplex : Type _ := topologicalSimplex X

namespace TopologicalSimplex

variable {X Y Z}

instance : FunLike (TopologicalSimplex X) X ‚Ñù where
  coe s := s.val
  coe_injective' := by aesop

@[continuity]
lemma continuous_apply (x : X) : Continuous (fun (s : TopologicalSimplex X) ‚Ü¶ s x) :=
  (_root_.continuous_apply x).comp continuous_subtype_val

@[simp]
lemma mem (s : TopologicalSimplex X) : ‚áës ‚àà topologicalSimplex X := s.2

@[ext high]
lemma ext {s t : TopologicalSimplex X} (h : (s : X ‚Üí ‚Ñù) = t) : s = t := by
  ext : 1
  assumption

@[simp]
lemma zero_le (s : TopologicalSimplex X) (x : X) : 0 ‚â§ s x := s.2.1 x

@[simp]
lemma sum_eq_one (s : TopologicalSimplex X) : ‚àë i, s i = 1 := s.2.2

@[simp]
lemma le_one (s : TopologicalSimplex X) (x : X) : s x ‚â§ 1 := by
  classical
  rw [‚Üê s.sum_eq_one, ‚Üê Finset.sum_compl_add_sum {x}, Finset.sum_singleton,
    le_add_iff_nonneg_left]
  exact Finset.sum_nonneg (by simp)

/-- Constructor for elements in the topological simplex. -/
def mk (f : X ‚Üí ‚Ñù) (hf' : ‚àë i, f i = 1) (hf : ‚àÄ i, 0 ‚â§ f i := by intros; positivity) :
    TopologicalSimplex X where
  val := f
  property := ‚ü®hf, hf'‚ü©

@[simp]
lemma mk_apply (f : X ‚Üí ‚Ñù) (x : X) (hf' : ‚àë i, f i = 1) (hf : ‚àÄ i, 0 ‚â§ f i) :
    mk f hf' hf x = f x :=
  rfl

variable (X) in
lemma convex : Convex ‚Ñù (topologicalSimplex X) := by
  rintro f ‚ü®hf, hf'‚ü© g ‚ü®hg, hg'‚ü© a b ha hb h
  refine ‚ü®fun i ‚Ü¶ ?_, ?_‚ü©
  ¬∑ replace hf := hf i
    replace hg := hg i
    dsimp
    positivity
  ¬∑ simp [Finset.sum_add_distrib, ‚Üê Finset.mul_sum, hf', hg', h]

noncomputable def affineCombination
    {Œπ : Type*} (t : Finset Œπ) (p : Œπ ‚Üí TopologicalSimplex X)
    (w : Œπ ‚Üí ‚Ñù) (hw‚ÇÄ : ‚àÄ i, 0 ‚â§ w i) (hw‚ÇÅ : t.sum w = 1) :
    TopologicalSimplex X :=
  (convex X).affineCombination t p w hw‚ÇÄ hw‚ÇÅ

lemma affineCombination_coe
    {Œπ : Type*} (t : Finset Œπ) (p : Œπ ‚Üí TopologicalSimplex X)
    (w : Œπ ‚Üí ‚Ñù) (hw‚ÇÄ : ‚àÄ i, 0 ‚â§ w i) (hw‚ÇÅ : t.sum w = 1) :
    (affineCombination t p w hw‚ÇÄ hw‚ÇÅ : X ‚Üí ‚Ñù) =
      Finset.affineCombination ‚Ñù t (fun i ‚Ü¶ (p i).1) w :=
  rfl

@[simp]
lemma affineCombination_apply
    {Œπ : Type*} (t : Finset Œπ) (p : Œπ ‚Üí TopologicalSimplex X)
    (w : Œπ ‚Üí ‚Ñù) (hw‚ÇÄ : ‚àÄ i, 0 ‚â§ w i) (hw‚ÇÅ : t.sum w = 1) (x : X) :
    affineCombination t p w hw‚ÇÄ hw‚ÇÅ x = t.sum (fun i ‚Ü¶ w i * p i x) := by
  rw [affineCombination_coe]
  aesop

section

variable [DecidableEq X]

/-- The vertex of `TopologicalSimplex X` corresponding to `x : X`. -/
def vertex (x : X) : TopologicalSimplex X :=
  .mk (fun y ‚Ü¶ if y = x then 1 else 0) (by
    rw [Finset.sum_eq_single x]
    all_goals grind)

@[simp]
lemma vertex_apply_self (x : X) :
    vertex x x = 1 := by
  simp [vertex]

lemma vertex_apply_eq_zero {x y : X} (h : y ‚â† x) :
    vertex x y = 0 := by
  dsimp [vertex]
  aesop

lemma eq_affineCombination (s : TopologicalSimplex X) :
    s = affineCombination .univ vertex s (by simp) (by simp) := by
  ext x
  simp
  rw [Finset.sum_eq_single x _ (by aesop),
    vertex_apply_self, mul_one]
  intro _ _ hb
  simp [vertex_apply_eq_zero hb.symm]

lemma exists_eq_affineCombination (s : TopologicalSimplex X) :
    ‚àÉ (w : X ‚Üí ‚Ñù) (hw‚ÇÄ : ‚àÄ (i : X), 0 ‚â§ w i) (hw‚ÇÅ : ‚àë i, w i = 1),
      s = affineCombination .univ vertex w hw‚ÇÄ hw‚ÇÅ :=
  ‚ü®_, _, _, eq_affineCombination s‚ü©

lemma vertex_injective : Function.Injective (vertex (X := X)) := by
  intro x y h
  replace h := DFunLike.congr_fun h x
  by_contra!
  simp [vertex_apply_self, vertex_apply_eq_zero this] at h

variable (X) in
lemma eq_convexHull :
    topologicalSimplex X =
      convexHull ‚Ñù (Set.range (fun x ‚Ü¶ ‚áë(vertex x))) := by
  refine subset_antisymm (fun f hf ‚Ü¶ ?_)
    (convexHull_min (by rintro _ ‚ü®i, rfl‚ü©; simp) (convex X))
  obtain ‚ü®w, hw‚ÇÄ, hw‚ÇÅ, h‚ü© := exists_eq_affineCombination ‚ü®f, hf‚ü©
  rw [Subtype.ext_iff] at h
  subst h
  apply affineCombination_mem_convexHull
  all_goals aesop

end

instance [Nonempty X] : Nonempty (TopologicalSimplex X) := by
  classical
  exact ‚ü®vertex (Classical.arbitrary _)‚ü©

instance [Nontrivial X] : Nontrivial (TopologicalSimplex X) where
  exists_pair_ne := by
    classical
    obtain ‚ü®x, y, hxy‚ü© := exists_pair_ne X
    exact ‚ü®vertex x, vertex y, fun h ‚Ü¶ hxy (vertex_injective h)‚ü©

instance [Subsingleton X] : Subsingleton (TopologicalSimplex X) where
  allEq s t := by
    ext i
    have (u : TopologicalSimplex X) : u i = 1 := by
      rw [‚Üê u.sum_eq_one, Finset.sum_eq_single i _ (by simp)]
      intro j _ hj
      exact (hj (Subsingleton.elim j i)).elim
    simp [this]

instance [Unique X] : Unique (TopologicalSimplex X) where
  default := .mk 1 (by
    rw [Finset.sum_eq_single default, Pi.one_apply]
    all_goals aesop) (by simp)
  uniq := by subsingleton

noncomputable def linearMap (f : X ‚Üí Y) : (X ‚Üí ‚Ñù) ‚Üí‚Çó[‚Ñù] (Y ‚Üí ‚Ñù) :=
  (((Finsupp.linearEquivFunOnFinite ‚Ñù ‚Ñù Y)).comp (Finsupp.lmapDomain ‚Ñù ‚Ñù f)).comp
    (Finsupp.linearEquivFunOnFinite ‚Ñù ‚Ñù X).symm.toLinearMap

lemma linearMap_apply_apply [DecidableEq Y] (f : X ‚Üí Y) (s : X ‚Üí ‚Ñù) (y : Y) :
    linearMap f s y = (Finset.univ.filter (fun (x : X) ‚Ü¶ f x = y)).sum s := by
  obtain ‚ü®s, rfl‚ü© := (Finsupp.linearEquivFunOnFinite ‚Ñù ‚Ñù X).surjective s
  dsimp [linearMap]
  simp only [LinearEquiv.symm_apply_apply, Finsupp.linearEquivFunOnFinite_apply]
  nth_rw 1 [‚Üê Finsupp.univ_sum_single s]
  rw [Finsupp.mapDomain_finset_sum]
  simp only [Finsupp.mapDomain_single, Finsupp.coe_finset_sum, Finset.sum_apply,
    Finset.sum_filter]
  congr
  ext x
  by_cases hx : f x = y
  ¬∑ simp [hx]
  ¬∑ rw [if_neg hx, Finsupp.single_eq_of_ne hx]

@[continuity]
lemma continuous_linearMap (f : X ‚Üí Y) : Continuous (linearMap f) := by
  classical
  refine continuous_pi (fun y ‚Ü¶ ?_)
  simp only [linearMap_apply_apply]
  apply continuous_finset_sum
  continuity

lemma linearEquivFunOnFinite_single [DecidableEq X] (x : X) :
    (Finsupp.linearEquivFunOnFinite ‚Ñù ‚Ñù X) (Finsupp.single x 1) = Pi.single x 1 := by
  ext y
  rw [Finsupp.linearEquivFunOnFinite_apply]
  by_cases hy : y = x
  ¬∑ subst hy
    simp
  ¬∑ rw [Finsupp.single_eq_of_ne (Ne.symm hy), Pi.single_eq_of_ne hy]

@[simp]
lemma vertex_eq_piSingle [DecidableEq X] (x : X) :
    ‚áë(vertex x) = Pi.single x 1 := by
  ext y
  by_cases hy : y = x
  ¬∑ subst hy
    simp
  ¬∑ rw [vertex_apply_eq_zero hy, Pi.single_eq_of_ne hy]

@[simp]
lemma linearMap_apply_piSingle [DecidableEq X] [DecidableEq Y] (f : X ‚Üí Y) (x : X) (t : ‚Ñù) :
    linearMap f (Pi.single x t) = Pi.single (f x) t := by
  simp [linearMap]

lemma linearMap_image (f : X ‚Üí Y) :
    Set.image (linearMap f) (topologicalSimplex X) ‚äÜ topologicalSimplex Y := by
  classical
  simp only [eq_convexHull, (linearMap f).isLinear.image_convexHull]
  apply convexHull_mono
  rintro _ ‚ü®_, ‚ü®x, rfl‚ü©, rfl‚ü©
  exact ‚ü®f x, by simp‚ü©

variable (X) in
@[simp]
lemma linearMap_id : linearMap (id : X ‚Üí X) = .id := by
  classical
  aesop

lemma linearMap_comp (f : X ‚Üí Y) (g : Y ‚Üí Z) :
    linearMap (g.comp f) = (linearMap g).comp (linearMap f) := by
  classical
  aesop

noncomputable def map (f : X ‚Üí Y) (s : TopologicalSimplex X) : TopologicalSimplex Y :=
  ‚ü®linearMap f s, linearMap_image f (by aesop)‚ü©

@[simp]
lemma map_coe (f : X ‚Üí Y) (s : TopologicalSimplex X) :
    ‚áë(map f s) = linearMap f s := rfl

@[continuity, fun_prop]
lemma continuous_map (f : X ‚Üí Y) : Continuous (map f) :=
  Continuous.subtype_mk ((continuous_linearMap f).comp continuous_induced_dom) _

variable (X) in
@[simp]
lemma map_id_apply (x) : map (id : X ‚Üí X) x = x := by
  aesop

lemma map_comp_apply (f : X ‚Üí Y) (g : Y ‚Üí Z) (x) :
    map g (map f x) = map (g.comp f) x := by
  ext
  simp [linearMap_comp]

section

open unitInterval

variable [DecidableEq X] (x‚ÇÄ x‚ÇÅ : X)

noncomputable def fromUnitInterval (t : I) : TopologicalSimplex X :=
  (convex X).fromUnitInterval (vertex x‚ÇÄ) (vertex x‚ÇÅ) t

@[simp]
lemma fromUnitInterval_coe (t : I) :
    ‚áë(fromUnitInterval x‚ÇÄ x‚ÇÅ t) = (1 - t.1) ‚Ä¢ vertex x‚ÇÄ + t.1 ‚Ä¢ vertex x‚ÇÅ:= rfl

@[simp]
lemma fromUnitInterval_zero :
    fromUnitInterval x‚ÇÄ x‚ÇÅ 0 = vertex x‚ÇÄ := by
  aesop

@[simp]
lemma fromUnitInterval_one :
    fromUnitInterval x‚ÇÄ x‚ÇÅ 1 = vertex x‚ÇÅ := by
  aesop

@[continuity]
lemma continuous_fromUnitInterval :
    Continuous (fromUnitInterval x‚ÇÄ x‚ÇÅ) :=
  (convex X).continuous_fromUnitInterval _ _

@[simps]
noncomputable def homeoUnitInterval (h : x‚ÇÄ ‚â† x‚ÇÅ) (h' : {x‚ÇÄ, x‚ÇÅ} = Finset.univ) :
    TopologicalSimplex X ‚âÉ‚Çú I where
  toFun s := ‚ü®s x‚ÇÅ, by simp, by simp‚ü©
  invFun := fromUnitInterval x‚ÇÄ x‚ÇÅ
  left_inv s := by
    ext x
    have : s x‚ÇÄ + s x‚ÇÅ = 1 := by
      rw [‚Üê s.sum_eq_one, ‚Üê h', Finset.sum_insert (by simpa), Finset.sum_singleton]
    have hx := Finset.mem_univ x
    simp only [‚Üê h', Finset.mem_insert, Finset.mem_singleton] at hx
    obtain rfl | rfl := hx
    ¬∑ simp [Pi.single_eq_of_ne h]
      grind
    ¬∑ simp [Pi.single_eq_of_ne' h]
  right_inv t := by
    ext
    simp [Pi.single_eq_of_ne' h]

noncomputable def homeoUnitInterval' : TopologicalSimplex (Fin 2) ‚âÉ‚Çú I :=
  homeoUnitInterval _ _ Fin.zero_ne_one (by aesop)

end

end TopologicalSimplex

namespace SimplexCategory

@[simp]
lemma concreteCategoryHom_id (n : SimplexCategory) : ConcreteCategory.hom (ùüô n) = .id := rfl

attribute [local simp] TopologicalSimplex.map_comp_apply

/-- The functor `SimplexCategory ‚•§ TopCat.{0}`
associating the topological `n`-simplex to `‚¶ãn‚¶å : SimplexCategory`. -/
@[simps obj map]
noncomputable def toTop‚ÇÄ : CosimplicialObject TopCat.{0} where
  obj n := TopCat.of (TopologicalSimplex (Fin (n.len + 1)))
  map f := TopCat.ofHom ‚ü®_, TopologicalSimplex.continuous_map f‚ü©

/-- The functor `SimplexCategory ‚•§ TopCat.{u}`
associating the topological `n`-simplex to `‚¶ãn‚¶å : SimplexCategory`. -/
@[simps! obj map, pp_with_univ]
noncomputable def toTop : CosimplicialObject TopCat.{u} :=
  toTop‚ÇÄ ‚ãô TopCat.uliftFunctor

end SimplexCategory

end

#exit
namespace SimplexCategory

open Simplicial NNReal CategoryTheory

/-- The topological simplex associated to `x : SimplexCategory`.
  This is the object part of the functor `SimplexCategory.toTop`. -/
def toTopObj (x : SimplexCategory) := { f : ToType x ‚Üí ‚Ñù‚â•0 | ‚àë i, f i = 1 }

instance (x : SimplexCategory) : CoeFun x.toTopObj fun _ => ToType x ‚Üí ‚Ñù‚â•0 :=
  ‚ü®fun f => (f : ToType x ‚Üí ‚Ñù‚â•0)‚ü©

@[ext]
theorem toTopObj.ext {x : SimplexCategory} (f g : x.toTopObj) : (f : ToType x ‚Üí ‚Ñù‚â•0) = g ‚Üí f = g :=
  Subtype.ext

@[simp]
lemma toTopObj_zero_apply_zero (f : ‚¶ã0‚¶å.toTopObj) : f 0 = 1 := by
  simpa [toType_apply] using show ‚àë _, _ = _ from f.2

lemma toTopObj_one_add_eq_one (f : ‚¶ã1‚¶å.toTopObj) : f 0 + f 1 = 1 := by
  simpa [toType_apply, Finset.sum] using show ‚àë _, _ = _ from f.2

lemma toTopObj_one_coe_add_coe_eq_one (f : ‚¶ã1‚¶å.toTopObj) : (f 0 : ‚Ñù) + f 1 = 1 := by
  norm_cast
  rw [toTopObj_one_add_eq_one]

instance (x : SimplexCategory) : Nonempty x.toTopObj :=
  ‚ü®‚ü®Pi.single 0 1, (show ‚àë _, _ = _ by simp)‚ü©‚ü©

instance : Unique ‚¶ã0‚¶å.toTopObj :=
  ‚ü®‚ü®1, show ‚àë _, _ = _ by simp [toType_apply]‚ü©, fun f ‚Ü¶ by ext i; fin_cases i; simp‚ü©

open unitInterval in
/-- The one-dimensional topological simplex is homeomorphic to the unit interval. -/
def toTopObjOneHomeo : ‚¶ã1‚¶å.toTopObj ‚âÉ‚Çú I where
  toFun f := ‚ü®f 0, (f 0).2, toTopObj_one_coe_add_coe_eq_one f ‚ñ∏ le_add_of_nonneg_right (f 1).2‚ü©
  invFun x := ‚ü®![toNNReal x, toNNReal (œÉ x)],
    show ‚àë _, _ = _ by ext; simp [toType_apply, Finset.sum]‚ü©
  left_inv f := by ext i; fin_cases i <;> simp [‚Üê toTopObj_one_coe_add_coe_eq_one f]
  right_inv x := by simp
  continuous_toFun := .subtype_mk (continuous_subtype_val.comp
    ((continuous_apply _).comp continuous_subtype_val)) _
  continuous_invFun := .subtype_mk (continuous_pi fun i ‚Ü¶ by fin_cases i <;> dsimp <;> fun_prop) _

open unitInterval in
instance (x : SimplexCategory) : PathConnectedSpace x.toTopObj := by
  refine ‚ü®inferInstance, ?_‚ü©
  intro f g
  dsimp [toTopObj, toType_apply] at f g ‚ä¢
  refine ‚ü®‚ü®fun j ‚Ü¶ ‚ü®toNNReal (symm j) ‚Ä¢ f.1 + toNNReal j ‚Ä¢ g.1, ?_‚ü©, ?_‚ü©, ?_, ?_‚ü©
  ¬∑ ext; simp [Finset.sum_add_distrib, ‚Üê Finset.mul_sum, f.2, g.2]
  ¬∑ fun_prop
  ¬∑ ext; simp
  ¬∑ ext; simp

open Classical in
/-- A morphism in `SimplexCategory` induces a map on the associated topological spaces. -/
def toTopMap {x y : SimplexCategory} (f : x ‚ü∂ y) (g : x.toTopObj) : y.toTopObj :=
  ‚ü®fun i => ‚àë j ‚àà Finset.univ.filter (f ¬∑ = i), g j, by
    simp only [toTopObj, Set.mem_setOf]
    rw [‚Üê Finset.sum_biUnion]
    ¬∑ have hg : ‚àë i : ToType x, g i = 1 := g.2
      convert hg
      simp [Finset.eq_univ_iff_forall]
    ¬∑ convert Set.pairwiseDisjoint_filter _ _ _‚ü©

open Classical in
@[simp]
theorem coe_toTopMap {x y : SimplexCategory} (f : x ‚ü∂ y) (g : x.toTopObj) (i : ToType y) :
    toTopMap f g i = ‚àë j ‚àà Finset.univ.filter (f ¬∑ = i), g j :=
  rfl

@[continuity, fun_prop]
theorem continuous_toTopMap {x y : SimplexCategory} (f : x ‚ü∂ y) : Continuous (toTopMap f) := by
  refine Continuous.subtype_mk (continuous_pi fun i => ?_) _
  dsimp only [coe_toTopMap]
  exact continuous_finset_sum _ (fun j _ => (continuous_apply _).comp continuous_subtype_val)

/-- The functor `SimplexCategory ‚•§ TopCat.{0}`
associating the topological `n`-simplex to `‚¶ãn‚¶å : SimplexCategory`. -/
@[simps obj map]
def toTop‚ÇÄ : SimplexCategory ‚•§ TopCat.{0} where
  obj x := TopCat.of x.toTopObj
  map f := TopCat.ofHom ‚ü®toTopMap f, by fun_prop‚ü©
  map_id := by
    classical
    intro Œî
    ext f
    simp [Finset.sum_filter]
  map_comp := fun f g => by
    classical
    ext h : 3
    dsimp
    rw [‚Üê Finset.sum_biUnion]
    ¬∑ apply Finset.sum_congr
      ¬∑ exact Finset.ext (fun j => ‚ü®fun hj => by simpa using hj, fun hj => by simpa using hj‚ü©)
      ¬∑ tauto
    ¬∑ apply Set.pairwiseDisjoint_filter

/-- The functor `SimplexCategory ‚•§ TopCat.{u}`
associating the topological `n`-simplex to `‚¶ãn‚¶å : SimplexCategory`. -/
@[simps! obj map, pp_with_univ]
def toTop : SimplexCategory ‚•§ TopCat.{u} :=
  toTop‚ÇÄ ‚ãô TopCat.uliftFunctor

end SimplexCategory
