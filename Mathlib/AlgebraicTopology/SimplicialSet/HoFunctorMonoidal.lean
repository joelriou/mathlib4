/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialSet.NerveAdjunction

/-!
# HoFunctor preserves binary products
-/

universe u

open CategoryTheory MonoidalCategory Simplicial SimplicialObject.Truncated
  CartesianMonoidalCategory Opposite SimplexCategory.Truncated

namespace CategoryTheory

variable {C‚ÇÅ C‚ÇÇ D : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D]

@[simps]
def prod.desc (obj : C‚ÇÅ √ó C‚ÇÇ ‚Üí D)
    (map‚ÇÅ : ‚àÄ ‚¶Éx‚ÇÅ y‚ÇÅ : C‚ÇÅ‚¶Ñ (_f‚ÇÅ : x‚ÇÅ ‚ü∂ y‚ÇÅ) (x‚ÇÇ : C‚ÇÇ), obj (x‚ÇÅ, x‚ÇÇ) ‚ü∂ obj (y‚ÇÅ, x‚ÇÇ))
    (map‚ÇÇ : ‚àÄ (x‚ÇÅ : C‚ÇÅ) ‚¶Éx‚ÇÇ y‚ÇÇ : C‚ÇÇ‚¶Ñ (_f‚ÇÇ : x‚ÇÇ ‚ü∂ y‚ÇÇ), obj (x‚ÇÅ, x‚ÇÇ) ‚ü∂ obj (x‚ÇÅ, y‚ÇÇ))
    (map‚ÇÅ_id : ‚àÄ (x‚ÇÅ : C‚ÇÅ) (x‚ÇÇ : C‚ÇÇ), map‚ÇÅ (ùüô x‚ÇÅ) x‚ÇÇ = ùüô _)
    (map‚ÇÇ_id : ‚àÄ (x‚ÇÅ : C‚ÇÅ) (x‚ÇÇ : C‚ÇÇ), map‚ÇÇ x‚ÇÅ (ùüô x‚ÇÇ) = ùüô _)
    (map‚ÇÅ_comp : ‚àÄ ‚¶Éx‚ÇÅ y‚ÇÅ z‚ÇÅ : C‚ÇÅ‚¶Ñ (f‚ÇÅ : x‚ÇÅ ‚ü∂ y‚ÇÅ) (g‚ÇÅ : y‚ÇÅ ‚ü∂ z‚ÇÅ) (x‚ÇÇ : C‚ÇÇ),
      map‚ÇÅ (f‚ÇÅ ‚â´ g‚ÇÅ) x‚ÇÇ = map‚ÇÅ f‚ÇÅ x‚ÇÇ ‚â´ map‚ÇÅ g‚ÇÅ x‚ÇÇ)
    (map‚ÇÇ_comp : ‚àÄ (x‚ÇÅ : C‚ÇÅ) ‚¶Éx‚ÇÇ y‚ÇÇ z‚ÇÇ : C‚ÇÇ‚¶Ñ (f‚ÇÇ : x‚ÇÇ ‚ü∂ y‚ÇÇ) (g‚ÇÇ : y‚ÇÇ ‚ü∂ z‚ÇÇ),
      map‚ÇÇ x‚ÇÅ (f‚ÇÇ ‚â´ g‚ÇÇ) = map‚ÇÇ x‚ÇÅ f‚ÇÇ ‚â´ map‚ÇÇ x‚ÇÅ g‚ÇÇ)
    (comm : ‚àÄ ‚¶Éx‚ÇÅ y‚ÇÅ : C‚ÇÅ‚¶Ñ (f‚ÇÅ : x‚ÇÅ ‚ü∂ y‚ÇÅ) ‚¶Éx‚ÇÇ y‚ÇÇ : C‚ÇÇ‚¶Ñ (f‚ÇÇ : x‚ÇÇ ‚ü∂ y‚ÇÇ),
      map‚ÇÅ f‚ÇÅ x‚ÇÇ ‚â´ map‚ÇÇ y‚ÇÅ f‚ÇÇ = map‚ÇÇ x‚ÇÅ f‚ÇÇ ‚â´ map‚ÇÅ f‚ÇÅ y‚ÇÇ) :
    C‚ÇÅ √ó C‚ÇÇ ‚•§ D where
  obj := obj
  map {x y} f := map‚ÇÅ f.1 x.2 ‚â´ map‚ÇÇ y.1 f.2
  map_id := by aesop
  map_comp {x y z} f g := by
    dsimp
    rw [Category.assoc, reassoc_of% map‚ÇÅ_comp, map‚ÇÇ_comp, reassoc_of% comm]

end CategoryTheory

namespace SSet

namespace Truncated

instance (n : ‚Ñï) : CartesianMonoidalCategory (Truncated.{u} n) :=
  inferInstanceAs (CartesianMonoidalCategory (_ ‚•§ Type u))

abbrev Edge {X : Truncated.{u} 2} (x y : X _‚¶ã0‚¶å‚ÇÇ) := OneTruncation‚ÇÇ.Hom x y

def Edge.id {X : Truncated.{u} 2} (x : X _‚¶ã0‚¶å‚ÇÇ) : Edge x x where
  edge := X.map (œÉ‚ÇÇ 0).op x
  src_eq := sorry
  tgt_eq := sorry

def Edge.prod {X Y : Truncated.{u} 2} {x x' : X _‚¶ã0‚¶å‚ÇÇ} (e‚ÇÅ : Edge x x') {y y' : Y _‚¶ã0‚¶å‚ÇÇ}
    (e‚ÇÇ : Edge y y') :
    Edge (X := X ‚äó Y) (x, y) (x', y') where
  edge := (e‚ÇÅ.edge, e‚ÇÇ.edge)
  src_eq := sorry
  tgt_eq := sorry

@[simps]
def Edge.map {X Y : Truncated.{u} 2} {x y : X _‚¶ã0‚¶å‚ÇÇ} (e : Edge x y) (f : X ‚ü∂ Y) :
    Edge (f.app _ x) (f.app _ y) where
  edge := f.app _ e.edge
  src_eq := by rw [‚Üê FunctorToTypes.naturality, e.src_eq]
  tgt_eq := by rw [‚Üê FunctorToTypes.naturality, e.tgt_eq]

structure CompStruct {X : Truncated.{u} 2} {x‚ÇÄ x‚ÇÅ x‚ÇÇ : X _‚¶ã0‚¶å‚ÇÇ}
    (e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ) (e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ) (e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ) where
  simplex : X _‚¶ã2‚¶å‚ÇÇ
  d‚ÇÇ : X.map (Œ¥‚ÇÇ 2).op simplex = e‚ÇÄ‚ÇÅ.edge
  d‚ÇÄ : X.map (Œ¥‚ÇÇ 0).op simplex = e‚ÇÅ‚ÇÇ.edge
  d‚ÇÅ : X.map (Œ¥‚ÇÇ 1).op simplex = e‚ÇÄ‚ÇÇ.edge

def CompStruct.prod {X : Truncated.{u} 2} {x‚ÇÄ x‚ÇÅ x‚ÇÇ : X _‚¶ã0‚¶å‚ÇÇ}
    {e‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {e‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ} {e‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ}
    (he : CompStruct e‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÇ e‚ÇÄ‚ÇÇ)
    {Y : Truncated.{u} 2} {y‚ÇÄ y‚ÇÅ y‚ÇÇ : Y _‚¶ã0‚¶å‚ÇÇ}
    {f‚ÇÄ‚ÇÅ : Edge y‚ÇÄ y‚ÇÅ} {f‚ÇÅ‚ÇÇ : Edge y‚ÇÅ y‚ÇÇ} {f‚ÇÄ‚ÇÇ : Edge y‚ÇÄ y‚ÇÇ}
    (hf : CompStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ) :
    CompStruct (e‚ÇÄ‚ÇÅ.prod f‚ÇÄ‚ÇÅ) (e‚ÇÅ‚ÇÇ.prod f‚ÇÅ‚ÇÇ) (e‚ÇÄ‚ÇÇ.prod f‚ÇÄ‚ÇÇ) := by
  sorry

def CompStruct.id_comp {X : Truncated.{u} 2} {x‚ÇÄ x‚ÇÅ : X _‚¶ã0‚¶å‚ÇÇ} (e : Edge x‚ÇÄ x‚ÇÅ) :
    CompStruct (.id _) e e := by
  sorry

def CompStruct.comp_id {X : Truncated.{u} 2} {x‚ÇÄ x‚ÇÅ : X _‚¶ã0‚¶å‚ÇÇ} (e : Edge x‚ÇÄ x‚ÇÅ) :
    CompStruct e (.id _) e := by
  sorry

variable (X Y : Truncated.{u} 2)

variable {X Y} in
def const (y : Y _‚¶ã0‚¶å‚ÇÇ) : X ‚ü∂ Y where
  app := by
    rintro ‚ü®n, _‚ü© _
    induction n using SimplexCategory.rec with | _ n
    induction n with
    | zero => exact y
    | succ => exact Y.map (SimplexCategory.Truncated.Hom.tr (SimplexCategory.const _ _ 0)).op y
  naturality := sorry

namespace HomotopyCategory

variable {X}

@[simps]
def objEquiv : X.HomotopyCategory ‚âÉ X _‚¶ã0‚¶å‚ÇÇ where
  toFun x := x.1.1
  invFun x := ‚ü®‚ü®x‚ü©‚ü©

def homMk {x y : X _‚¶ã0‚¶å‚ÇÇ} (f : Edge x y) :
    objEquiv.symm x ‚ü∂ objEquiv.symm y :=
  (Cat.FreeRefl.quotientFunctor _ ‚ãô quotientFunctor X).map (Quiver.Hom.toPath f)

@[reassoc]
lemma homMk_comp {x‚ÇÄ x‚ÇÅ x‚ÇÇ : X _‚¶ã0‚¶å‚ÇÇ} {f‚ÇÄ‚ÇÅ : Edge x‚ÇÄ x‚ÇÅ} {f‚ÇÅ‚ÇÇ : Edge x‚ÇÅ x‚ÇÇ}
    {f‚ÇÄ‚ÇÇ : Edge x‚ÇÄ x‚ÇÇ} (h : CompStruct f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ) :
    homMk f‚ÇÄ‚ÇÅ ‚â´ homMk f‚ÇÅ‚ÇÇ = homMk f‚ÇÄ‚ÇÇ := by
  exact (CategoryTheory.Quotient.sound HoRel‚ÇÇ
    (HoRel‚ÇÇ.mk' (V := X) h.simplex f‚ÇÄ‚ÇÅ f‚ÇÅ‚ÇÇ f‚ÇÄ‚ÇÇ sorry sorry sorry)).symm

lemma homMk_square {x‚ÇÄ x‚ÇÅ : X _‚¶ã0‚¶å‚ÇÇ} (f : Edge x‚ÇÄ x‚ÇÅ) {y‚ÇÄ y‚ÇÅ : Y _‚¶ã0‚¶å‚ÇÇ} (g : Edge y‚ÇÄ y‚ÇÅ) :
    homMk (f.prod (Edge.id y‚ÇÄ)) ‚â´ homMk ((Edge.id x‚ÇÅ).prod g) =
      homMk ((Edge.id x‚ÇÄ).prod g) ‚â´ homMk (f.prod (Edge.id y‚ÇÅ)) := by
  trans homMk (f.prod g)
  ¬∑ exact homMk_comp (CompStruct.prod (.comp_id _) (.id_comp _))
  ¬∑ exact (homMk_comp (CompStruct.prod (.id_comp _) (.comp_id _))).symm

variable (X)

def hom_induction {motive : ‚àÄ {x x' : X.HomotopyCategory} (_ : x ‚ü∂ x'), Prop}
    (id : ‚àÄ x, motive (ùüô x))
    (comp : ‚àÄ {x x' x''} (f : x ‚ü∂ x') (g : x' ‚ü∂ x''), motive f ‚Üí motive g ‚Üí motive (f ‚â´ g))
    (toPath : ‚àÄ {x x' : X _‚¶ã0‚¶å‚ÇÇ} (e : OneTruncation‚ÇÇ.Hom x x'), motive (homMk e))
    {x x' : X.HomotopyCategory} (f : x ‚ü∂ x') : motive f := by
  obtain ‚ü®‚ü®x‚ü©‚ü© := x
  obtain ‚ü®‚ü®x'‚ü©‚ü© := x'
  obtain ‚ü®‚ü®f‚ü©‚ü© := f
  expose_names; clear a f_1 -- needs cleanup...
  dsimp at f
  induction f with
  | nil => apply id
  | cons p g hp => exact comp _ _ hp (toPath g)

namespace BinaryProduct

variable {x x' : X _‚¶ã0‚¶å‚ÇÇ} {y y' : Y _‚¶ã0‚¶å‚ÇÇ}

def functor : (X ‚äó Y).HomotopyCategory ‚•§ (X.HomotopyCategory √ó Y.HomotopyCategory) :=
  Functor.prod' (mapHomotopyCategory (fst _ _)) (mapHomotopyCategory (snd _ _))

namespace inverse

variable {Y} in
def Œπ‚ÇÅ (y : Y _‚¶ã0‚¶å‚ÇÇ) : X.HomotopyCategory ‚•§ (X ‚äó Y).HomotopyCategory :=
  mapHomotopyCategory (lift (ùüô X) (const y))

variable {X} in
def Œπ‚ÇÇ (x : X _‚¶ã0‚¶å‚ÇÇ) : Y.HomotopyCategory ‚•§ (X ‚äó Y).HomotopyCategory :=
  mapHomotopyCategory (lift (const x) (ùüô Y))

@[simp]
lemma Œπ‚ÇÅ_map_homMk (y : Y _‚¶ã0‚¶å‚ÇÇ) {x x' : X _‚¶ã0‚¶å‚ÇÇ} (e : Edge x x') :
    (Œπ‚ÇÅ X y).map (homMk e) = homMk (e.prod (Edge.id y)) := by
  sorry

@[simp]
lemma Œπ‚ÇÇ_map_homMk (x : X _‚¶ã0‚¶å‚ÇÇ) {y y' : Y _‚¶ã0‚¶å‚ÇÇ} (e : Edge y y') :
    (Œπ‚ÇÇ Y x).map (homMk e) = homMk ((Edge.id x).prod e) := by
  sorry

variable {X Y}

def obj (x : X.HomotopyCategory √ó Y.HomotopyCategory) : (X ‚äó Y).HomotopyCategory :=
  objEquiv.symm ‚ü®objEquiv x.1, objEquiv x.2‚ü©

lemma comm
    {x x' : X.HomotopyCategory} (f : x ‚ü∂ x') {y y' : Y.HomotopyCategory} (g : y ‚ü∂ y') :
    (Œπ‚ÇÅ X (objEquiv y)).map f ‚â´ (Œπ‚ÇÇ Y (objEquiv x')).map g =
      (Œπ‚ÇÇ Y (objEquiv x)).map g ‚â´ (Œπ‚ÇÅ X (objEquiv y')).map f := by
  induction g using hom_induction with
  | id =>
    simp [Œπ‚ÇÅ, Œπ‚ÇÇ]
    apply Category.comp_id
  | comp g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ =>
    rw [Functor.map_comp_assoc, Functor.map_comp, reassoc_of% h‚ÇÅ, h‚ÇÇ]
  | @toPath y y' g =>
    induction f using hom_induction with
    | id =>
      simp [Œπ‚ÇÅ, Œπ‚ÇÇ]
      symm
      apply Category.comp_id
    | comp f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ =>
      dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
      rw [Functor.map_comp_assoc, Functor.map_comp, h‚ÇÇ, reassoc_of% h‚ÇÅ]
    | @toPath x x' f => simp [homMk_square]

end inverse

open inverse in
def inverse : (X.HomotopyCategory √ó Y.HomotopyCategory) ‚•§ (X ‚äó Y).HomotopyCategory :=
  prod.desc obj
    (fun x x' f y ‚Ü¶ (Œπ‚ÇÅ X (objEquiv y)).map f)
    (fun x y y' g ‚Ü¶ (Œπ‚ÇÇ Y (objEquiv x)).map g)
    (fun _ _ ‚Ü¶ by cat_disch)
    (fun _ _ ‚Ü¶ by cat_disch)
    (fun _ _ _ _ _ _ ‚Ü¶ by cat_disch)
    (fun _ _ _ _ _ _ ‚Ü¶ by cat_disch)
    (fun x x' f y y' g ‚Ü¶ comm f g)

def equivalence : (X ‚äó Y).HomotopyCategory ‚âå (X.HomotopyCategory √ó Y.HomotopyCategory) where
  functor := functor X Y
  inverse := inverse X Y
  unitIso := NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _) sorry
  counitIso := NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _) sorry

end BinaryProduct

end HomotopyCategory

end Truncated

end SSet
