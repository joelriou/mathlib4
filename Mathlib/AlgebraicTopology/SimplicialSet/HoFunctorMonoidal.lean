/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialSet.NerveAdjunction

/-!
# HoFunctor preserves binary products
-/

universe u

open CategoryTheory MonoidalCategory Simplicial SimplicialObject.Truncated
  CartesianMonoidalCategory

namespace CategoryTheory

variable {C‚ÇÅ C‚ÇÇ D : Type*} [Category C‚ÇÅ] [Category C‚ÇÇ] [Category D]

@[simps]
def prod.desc (obj : C‚ÇÅ √ó C‚ÇÇ ‚Üí D)
    (map‚ÇÅ : ‚àÄ ‚¶Éx‚ÇÅ y‚ÇÅ : C‚ÇÅ‚¶Ñ (_f‚ÇÅ : x‚ÇÅ ‚ü∂ y‚ÇÅ) (x‚ÇÇ : C‚ÇÇ), obj (x‚ÇÅ, x‚ÇÇ) ‚ü∂ obj (y‚ÇÅ, x‚ÇÇ))
    (map‚ÇÇ : ‚àÄ (x‚ÇÅ : C‚ÇÅ) ‚¶Éx‚ÇÇ y‚ÇÇ : C‚ÇÇ‚¶Ñ (_f‚ÇÇ : x‚ÇÇ ‚ü∂ y‚ÇÇ), obj (x‚ÇÅ, x‚ÇÇ) ‚ü∂ obj (x‚ÇÅ, y‚ÇÇ))
    (map‚ÇÅ_id : ‚àÄ (x‚ÇÅ : C‚ÇÅ) (x‚ÇÇ : C‚ÇÇ), map‚ÇÅ (ùüô x‚ÇÅ) x‚ÇÇ = ùüô _)
    (map‚ÇÇ_id : ‚àÄ (x‚ÇÅ : C‚ÇÅ) (x‚ÇÇ : C‚ÇÇ), map‚ÇÇ x‚ÇÅ (ùüô x‚ÇÇ) = ùüô _)
    (map‚ÇÅ_comp : ‚àÄ ‚¶Éx‚ÇÅ y‚ÇÅ z‚ÇÅ : C‚ÇÅ‚¶Ñ (f‚ÇÅ : x‚ÇÅ ‚ü∂ y‚ÇÅ) (g‚ÇÅ : y‚ÇÅ ‚ü∂ z‚ÇÅ) (x‚ÇÇ : C‚ÇÇ),
      map‚ÇÅ (f‚ÇÅ ‚â´ g‚ÇÅ) x‚ÇÇ = map‚ÇÅ f‚ÇÅ x‚ÇÇ ‚â´ map‚ÇÅ g‚ÇÅ x‚ÇÇ)
    (map‚ÇÇ_comp : ‚àÄ (x‚ÇÅ : C‚ÇÅ) ‚¶Éx‚ÇÇ y‚ÇÇ z‚ÇÇ : C‚ÇÇ‚¶Ñ (f‚ÇÇ : x‚ÇÇ ‚ü∂ y‚ÇÇ) (g‚ÇÇ : y‚ÇÇ ‚ü∂ z‚ÇÇ),
      map‚ÇÇ x‚ÇÅ (f‚ÇÇ ‚â´ g‚ÇÇ) = map‚ÇÇ x‚ÇÅ f‚ÇÇ ‚â´ map‚ÇÇ x‚ÇÅ g‚ÇÇ)
    (comm : ‚àÄ ‚¶Éx‚ÇÅ y‚ÇÅ : C‚ÇÅ‚¶Ñ (f‚ÇÅ : x‚ÇÅ ‚ü∂ y‚ÇÅ) ‚¶Éx‚ÇÇ y‚ÇÇ : C‚ÇÇ‚¶Ñ (f‚ÇÇ : x‚ÇÇ ‚ü∂ y‚ÇÇ),
      map‚ÇÅ f‚ÇÅ x‚ÇÇ ‚â´ map‚ÇÇ y‚ÇÅ f‚ÇÇ = map‚ÇÇ x‚ÇÅ f‚ÇÇ ‚â´ map‚ÇÅ f‚ÇÅ y‚ÇÇ) :
    C‚ÇÅ √ó C‚ÇÇ ‚•§ D where
  obj := obj
  map {x y} f := map‚ÇÅ f.1 x.2 ‚â´ map‚ÇÇ y.1 f.2
  map_id := by aesop
  map_comp {x y z} f g := by
    dsimp
    rw [Category.assoc, reassoc_of% map‚ÇÅ_comp, map‚ÇÇ_comp, reassoc_of% comm]

end CategoryTheory

namespace SSet

namespace Truncated

instance (n : ‚Ñï) : CartesianMonoidalCategory (Truncated.{u} n) :=
  inferInstanceAs (CartesianMonoidalCategory (_ ‚•§ Type u))

variable (X Y : Truncated.{u} 2)

variable {X Y} in
def const (y : Y _‚¶ã0‚¶å‚ÇÇ) : X ‚ü∂ Y where
  app := by
    rintro ‚ü®n, _‚ü© _
    induction n using SimplexCategory.rec with | _ n
    induction n with
    | zero => exact y
    | succ => exact Y.map (SimplexCategory.Truncated.Hom.tr (SimplexCategory.const _ _ 0)).op y
  naturality := sorry

namespace HomotopyCategory

def hom_induction {motive : ‚àÄ {x x' : X.HomotopyCategory} (f : x ‚ü∂ x'), Prop}
    (id : ‚àÄ x, motive (ùüô x))
    (comp : ‚àÄ {x x' x''} (f : x ‚ü∂ x') (g : x' ‚ü∂ x''), motive f ‚Üí motive g ‚Üí motive (f ‚â´ g))
    (toPath : ‚àÄ {x x' : OneTruncation‚ÇÇ X} (e : x ‚ü∂ x'),
      motive ((Cat.FreeRefl.quotientFunctor _ ‚ãô quotientFunctor X).map e.toPath))
    {x x' : X.HomotopyCategory} (f : x ‚ü∂ x') : motive f := by
  obtain ‚ü®‚ü®x‚ü©‚ü© := x
  obtain ‚ü®‚ü®x'‚ü©‚ü© := x'
  obtain ‚ü®‚ü®f‚ü©‚ü© := f
  expose_names; clear a f_1 -- needs cleanup...
  dsimp at f
  induction f with
  | nil => apply id
  | cons p g hp => exact comp _ _ hp (toPath g)

variable {X} in
@[simps]
def objEquiv : X.HomotopyCategory ‚âÉ X _‚¶ã0‚¶å‚ÇÇ where
  toFun x := x.1.1
  invFun x := ‚ü®‚ü®x‚ü©‚ü©

namespace BinaryProduct

variable {x x' : X _‚¶ã0‚¶å‚ÇÇ} {y y' : Y _‚¶ã0‚¶å‚ÇÇ}

def functor : (X ‚äó Y).HomotopyCategory ‚•§ (X.HomotopyCategory √ó Y.HomotopyCategory) :=
  Functor.prod' (mapHomotopyCategory (fst _ _)) (mapHomotopyCategory (snd _ _))

namespace inverse

variable {Y} in
def Œπ‚ÇÅ (y : Y _‚¶ã0‚¶å‚ÇÇ) : X.HomotopyCategory ‚•§ (X ‚äó Y).HomotopyCategory :=
  mapHomotopyCategory (lift (ùüô X) (const y))

variable {X} in
def Œπ‚ÇÇ (x : X _‚¶ã0‚¶å‚ÇÇ) : Y.HomotopyCategory ‚•§ (X ‚äó Y).HomotopyCategory :=
  mapHomotopyCategory (lift (const x) (ùüô Y))

variable {X Y}

def obj (x : X.HomotopyCategory √ó Y.HomotopyCategory) : (X ‚äó Y).HomotopyCategory :=
  objEquiv.symm ‚ü®objEquiv x.1, objEquiv x.2‚ü©

lemma comm
    {x x' : X.HomotopyCategory} (f : x ‚ü∂ x') {y y' : Y.HomotopyCategory} (g : y ‚ü∂ y') :
    (Œπ‚ÇÅ X (objEquiv y)).map f ‚â´ (Œπ‚ÇÇ Y (objEquiv x')).map g =
      (Œπ‚ÇÇ Y (objEquiv x)).map g ‚â´ (Œπ‚ÇÅ X (objEquiv y')).map f := by
  induction g using hom_induction with
  | id =>
    simp [Œπ‚ÇÅ, Œπ‚ÇÇ]
    apply Category.comp_id
  | comp g‚ÇÅ g‚ÇÇ h‚ÇÅ h‚ÇÇ =>
    rw [Functor.map_comp_assoc, Functor.map_comp, reassoc_of% h‚ÇÅ, h‚ÇÇ]
  | @toPath y y' g =>
    induction f using hom_induction with
    | id =>
      simp [Œπ‚ÇÅ, Œπ‚ÇÇ]
      symm
      apply Category.comp_id
    | comp f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ =>
      dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢
      rw [Functor.map_comp_assoc, Functor.map_comp, h‚ÇÇ, reassoc_of% h‚ÇÅ]
    | @toPath x x' f =>
      dsimp
      change (HomotopyCategory.quotientFunctor _).map _ ‚â´
        (HomotopyCategory.quotientFunctor _).map _ = _
      sorry

end inverse

open inverse in
def inverse : (X.HomotopyCategory √ó Y.HomotopyCategory) ‚•§ (X ‚äó Y).HomotopyCategory :=
  prod.desc obj
    (fun x x' f y ‚Ü¶ (Œπ‚ÇÅ X (objEquiv y)).map f)
    (fun x y y' g ‚Ü¶ (Œπ‚ÇÇ Y (objEquiv x)).map g)
    (fun _ _ ‚Ü¶ by cat_disch)
    (fun _ _ ‚Ü¶ by cat_disch)
    (fun _ _ _ _ _ _ ‚Ü¶ by cat_disch)
    (fun _ _ _ _ _ _ ‚Ü¶ by cat_disch)
    (fun x x' f y y' g ‚Ü¶ comm f g)

def equivalence : (X ‚äó Y).HomotopyCategory ‚âå (X.HomotopyCategory √ó Y.HomotopyCategory) where
  functor := functor X Y
  inverse := inverse X Y
  unitIso := NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _) sorry
  counitIso := NatIso.ofComponents (fun _ ‚Ü¶ Iso.refl _) sorry
  functor_unitIso_comp := sorry

end BinaryProduct

end HomotopyCategory

end Truncated

end SSet
