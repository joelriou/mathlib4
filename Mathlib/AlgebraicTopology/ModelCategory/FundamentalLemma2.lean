/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.ModelCategory.FundamentalLemma1

/-!
# The fundamental lemma of homotopical algebra

-/

open CategoryTheory Limits

namespace HomotopicalAlgebra

variable (C : Type*) [Category C] [ModelCategory C]

namespace BifibrantObject

def homRel : HomRel (BifibrantObject C) :=
  fun X Y ‚Ü¶ RightHomotopyRel (X := X.1) (Y := Y.1)

instance : Congruence (homRel C) where
  equivalence := RightHomotopyRel.equivalence _ _
  compLeft p _ _ h := h.precomp p
  compRight p h := h.postcomp p

variable {C} {X Y : BifibrantObject C} (f g : X ‚ü∂ Y)

lemma homRel_iff_rightHomotopyRel :
    homRel C f g ‚Üî RightHomotopyRel (Œπ.map f) (Œπ.map g) := Iff.rfl

lemma homRel_iff_leftHomotopyRel :
    homRel C f g ‚Üî LeftHomotopyRel (Œπ.map f) (Œπ.map g) := by
  rw [homRel_iff_rightHomotopyRel, leftHomotopyRel_iff_rightHomotopyRel]

variable (C) in
abbrev œÄ := Quotient (BifibrantObject.homRel C)

def toœÄ : BifibrantObject C ‚•§ œÄ C := Quotient.functor _

lemma toœÄ_obj_surjective : Function.Surjective (toœÄ (C := C)).obj :=
  fun ‚ü®_‚ü© ‚Ü¶ ‚ü®_, rfl‚ü©

instance : Functor.Full (toœÄ (C := C)) := by dsimp [toœÄ]; infer_instance

lemma toœÄ_map_eq_iff {X Y : BifibrantObject C} (f g : X ‚ü∂ Y) :
    toœÄ.map f = toœÄ.map g ‚Üî homRel C f g :=
  Quotient.functor_map_eq_iff _ _ _

section

variable (E : Type*) [Category E]

lemma inverts_iff_factors (F : BifibrantObject C ‚•§ E) :
    (weakEquivalences _).IsInvertedBy F ‚Üî
    ‚àÄ ‚¶ÉK L : BifibrantObject C‚¶Ñ (f g : K ‚ü∂ L),
      homRel C f g ‚Üí F.map f = F.map g := by
  constructor
  ¬∑ intro H K L f g h
    obtain ‚ü®P, _, ‚ü®h‚ü©‚ü© := h.exists_very_good
    have := isCofibrant_of_cofibration P.Œπ
    let Œ≥ : K ‚ü∂ mk P.P := h.h
    let p‚ÇÄ : mk P.P ‚ü∂ L := P.p‚ÇÄ
    let p‚ÇÅ : mk P.P ‚ü∂ L := P.p‚ÇÅ
    let s : L ‚ü∂ mk P.P := P.Œπ
    have : IsIso (F.map s) := H _ (by
      rw [‚Üê weakEquivalence_iff, weakEquivalence_iff_Œπ_map]
      exact inferInstanceAs (WeakEquivalence P.Œπ))
    simp only [‚Üê h.h‚ÇÄ, ‚Üê h.h‚ÇÅ]
    change F.map (Œ≥ ‚â´ p‚ÇÄ) = F.map (Œ≥ ‚â´ p‚ÇÅ)
    simp only [Functor.map_comp]
    congr 1
    simp only [‚Üê cancel_epi (F.map s), ‚Üê Functor.map_comp]
    congr 1
    exact Œπ.map_injective (P.Œπ_p‚ÇÄ.trans P.Œπ_p‚ÇÅ.symm)
  ¬∑ intro h X Y f hf
    rw [‚Üê weakEquivalence_iff, weakEquivalence_iff_Œπ_map] at hf
    let f' := (bifibrantObjects C).Œπ.map f
    obtain ‚ü®g', h‚ÇÅ, h‚ÇÇ‚ü© := RightHomotopyClass.exists_homotopy_inverse f'
    refine ‚ü®F.map g', ?_, ?_‚ü©
    all_goals
    ¬∑ rw [‚Üê F.map_comp, ‚Üê F.map_id]
      apply h
      assumption

def strictUniversalPropertyFixedTargetToœÄ :
    Localization.StrictUniversalPropertyFixedTarget
    toœÄ (weakEquivalences (BifibrantObject C)) E where
  inverts := by
    rw [inverts_iff_factors]
    intro K L f g h
    exact CategoryTheory.Quotient.sound _ h
  lift F hF := CategoryTheory.Quotient.lift _ F
    (by rwa [inverts_iff_factors] at hF)
  fac F hF := rfl
  uniq _ _ h := Quotient.lift_unique' _ _ _ h

end

instance : toœÄ.IsLocalization (weakEquivalences (BifibrantObject C)) :=
  .mk' _ _ (strictUniversalPropertyFixedTargetToœÄ _)
    (strictUniversalPropertyFixedTargetToœÄ _)

instance {X Y : BifibrantObject C} (f : X ‚ü∂ Y) [hf : WeakEquivalence f] :
    IsIso (toœÄ.map f) :=
  Localization.inverts toœÄ (weakEquivalences _) f (by rwa [weakEquivalence_iff] at hf)

abbrev ŒπCofibrantObject : BifibrantObject C ‚•§ CofibrantObject C :=
  ObjectProperty.ŒπOfLE (bifibrantObjects_le_cofibrantObject C)

abbrev ŒπFibrantObject : BifibrantObject C ‚•§ FibrantObject C :=
  ObjectProperty.ŒπOfLE (bifibrantObjects_le_fibrantObject C)

instance (X : BifibrantObject C) :
    IsFibrant (BifibrantObject.ŒπCofibrantObject.obj X).obj := X.2.2

instance (X : BifibrantObject C) :
    IsCofibrant (BifibrantObject.ŒπFibrantObject.obj X).obj := X.2.1

protected def œÄ.ŒπCofibrantObject : œÄ C ‚•§ CofibrantObject.œÄ C :=
  CategoryTheory.Quotient.lift _
    (ŒπCofibrantObject ‚ãô CofibrantObject.toœÄ)
    (fun _ _ _ _ h ‚Ü¶ CategoryTheory.Quotient.sound _ h)

protected def œÄ.ŒπFibrantObject : œÄ C ‚•§ FibrantObject.œÄ C :=
  CategoryTheory.Quotient.lift _
    (ŒπFibrantObject ‚ãô FibrantObject.toœÄ)
    (fun _ _ _ _ h ‚Ü¶ CategoryTheory.Quotient.sound _ (by
      simpa [FibrantObject.homRel, leftHomotopyRel_iff_rightHomotopyRel]))

end BifibrantObject

namespace CofibrantObject

variable {C}

lemma exists_bifibrant (X : CofibrantObject C) :
    ‚àÉ (Y : BifibrantObject C) (i : X ‚ü∂ BifibrantObject.ŒπCofibrantObject.obj Y),
      Cofibration (Œπ.map i) ‚àß WeakEquivalence (Œπ.map i) := by
  have h := MorphismProperty.factorizationData (trivialCofibrations C) (fibrations C)
      (terminal.from X.obj)
  have := isCofibrant_of_cofibration h.i
  have : IsFibrant h.Z := by
    rw [isFibrant_iff_of_isTerminal h.p terminalIsTerminal]
    infer_instance
  exact ‚ü®BifibrantObject.mk h.Z, h.i, inferInstanceAs (Cofibration h.i),
    inferInstanceAs (WeakEquivalence h.i)‚ü©

noncomputable def bifibrantResolutionObj (X : CofibrantObject C) :
    BifibrantObject C :=
  (exists_bifibrant X).choose

noncomputable def iBifibrantResolutionObj (X : CofibrantObject C) :
    X ‚ü∂ BifibrantObject.ŒπCofibrantObject.obj (bifibrantResolutionObj X) :=
  (exists_bifibrant X).choose_spec.choose

instance (X : CofibrantObject C) :
    Cofibration (Œπ.map (iBifibrantResolutionObj X)) :=
  (exists_bifibrant X).choose_spec.choose_spec.1

instance (X : CofibrantObject C) :
    WeakEquivalence (Œπ.map (iBifibrantResolutionObj X)) :=
  (exists_bifibrant X).choose_spec.choose_spec.2

instance (X : BifibrantObject C) :
    IsFibrant (Œπ.obj (BifibrantObject.ŒπCofibrantObject.obj X)) := X.2.2

lemma exists_bifibrant_map {X‚ÇÅ X‚ÇÇ : CofibrantObject C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    ‚àÉ (g : bifibrantResolutionObj X‚ÇÅ ‚ü∂ bifibrantResolutionObj X‚ÇÇ),
      iBifibrantResolutionObj X‚ÇÅ ‚â´ (BifibrantObject.ŒπCofibrantObject.map g) =
      f ‚â´ iBifibrantResolutionObj X‚ÇÇ := by
  have sq : CommSq (Œπ.map (f ‚â´ iBifibrantResolutionObj X‚ÇÇ))
    (Œπ.map (iBifibrantResolutionObj X‚ÇÅ)) (terminal.from _) (terminal.from _) := ‚ü®by simp‚ü©
  exact ‚ü®sq.lift, sq.fac_left‚ü©

noncomputable def bifibrantResolutionMap {X‚ÇÅ X‚ÇÇ : CofibrantObject C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    bifibrantResolutionObj X‚ÇÅ ‚ü∂ bifibrantResolutionObj X‚ÇÇ :=
  (exists_bifibrant_map f).choose

@[reassoc (attr := simp)]
noncomputable def bifibrantResolutionMap_fac {X‚ÇÅ X‚ÇÇ : CofibrantObject C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    iBifibrantResolutionObj X‚ÇÅ ‚â´
      (BifibrantObject.ŒπCofibrantObject.map (bifibrantResolutionMap f)) =
      f ‚â´ iBifibrantResolutionObj X‚ÇÇ :=
  (exists_bifibrant_map f).choose_spec

@[reassoc (attr := simp)]
noncomputable def bifibrantResolutionMap_fac' {X‚ÇÅ X‚ÇÇ : CofibrantObject C} (f : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    toœÄ.map X‚ÇÅ.iBifibrantResolutionObj ‚â´
      BifibrantObject.œÄ.ŒπCofibrantObject.map
        (BifibrantObject.toœÄ.map (bifibrantResolutionMap f)) =
    toœÄ.map f ‚â´ toœÄ.map X‚ÇÇ.iBifibrantResolutionObj :=
  toœÄ.congr_map (bifibrantResolutionMap_fac f)

lemma bifibrantResolutionObj_hom_ext
    {X : CofibrantObject C} {Y : BifibrantObject.œÄ C} {f g :
      BifibrantObject.toœÄ.obj (bifibrantResolutionObj X) ‚ü∂ Y}
    (h : CofibrantObject.toœÄ.map (iBifibrantResolutionObj X) ‚â´
      BifibrantObject.œÄ.ŒπCofibrantObject.map f =
      CofibrantObject.toœÄ.map (iBifibrantResolutionObj X) ‚â´
        BifibrantObject.œÄ.ŒπCofibrantObject.map g) :
    f = g := by
  obtain ‚ü®Y, rfl‚ü© := BifibrantObject.toœÄ_obj_surjective Y
  obtain ‚ü®f, rfl‚ü© := BifibrantObject.toœÄ.map_surjective f
  obtain ‚ü®g, rfl‚ü© := BifibrantObject.toœÄ.map_surjective g
  change toœÄ.map (X.iBifibrantResolutionObj ‚â´ BifibrantObject.ŒπCofibrantObject.map f) =
    toœÄ.map (X.iBifibrantResolutionObj ‚â´ BifibrantObject.ŒπCofibrantObject.map g) at h
  rw [CofibrantObject.toœÄ_map_eq_iff,
    CofibrantObject.homRel_iff_rightHomotopyRel,
    ‚Üê RightHomotopyClass.mk_eq_mk_iff] at h
  rw [BifibrantObject.toœÄ_map_eq_iff,
    BifibrantObject.homRel_iff_rightHomotopyRel,
    ‚Üê RightHomotopyClass.mk_eq_mk_iff]
  apply (RightHomotopyClass.bijective_precomp_of_cofibration_of_weakEquivalence
    _ (Œπ.map (iBifibrantResolutionObj X))).1
  simpa only [ObjectProperty.Œπ_obj, ObjectProperty.ŒπOfLE_obj_obj, ObjectProperty.Œπ_map,
    RightHomotopyClass.precomp_mk] using h

@[simps]
noncomputable def bifibrantResolution : CofibrantObject C ‚•§ BifibrantObject.œÄ C where
  obj X := BifibrantObject.toœÄ.obj (bifibrantResolutionObj X)
  map f := BifibrantObject.toœÄ.map (bifibrantResolutionMap f)
  map_id X := by
    apply bifibrantResolutionObj_hom_ext
    simp only [bifibrantResolutionMap_fac', CategoryTheory.Functor.map_id,
      Category.id_comp]
    exact (Category.comp_id _).symm
  map_comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ} f g := by
    apply bifibrantResolutionObj_hom_ext
    simp

noncomputable def œÄ.bifibrantResolution :
    CofibrantObject.œÄ C ‚•§ BifibrantObject.œÄ C :=
  CategoryTheory.Quotient.lift _ CofibrantObject.bifibrantResolution (by
    intro X Y f g h
    dsimp
    apply bifibrantResolutionObj_hom_ext
    simp only [bifibrantResolutionMap_fac', toœÄ_map_eq h])

@[simp]
lemma œÄ.bifibrantResolution_obj (X : CofibrantObject C) :
    œÄ.bifibrantResolution.obj (CofibrantObject.toœÄ.obj X) =
      BifibrantObject.toœÄ.obj (bifibrantResolutionObj X) := rfl

@[simp]
lemma œÄ.bifibrantResolution_map {X Y : CofibrantObject C} (f : X ‚ü∂ Y) :
    œÄ.bifibrantResolution.map (CofibrantObject.toœÄ.map f) =
      BifibrantObject.toœÄ.map (bifibrantResolutionMap f) := rfl

noncomputable def œÄ.adj.unit :
    ùü≠ (œÄ C) ‚ü∂ bifibrantResolution ‚ãô BifibrantObject.œÄ.ŒπCofibrantObject :=
  Quotient.natTransLift _
    { app X := toœÄ.map (iBifibrantResolutionObj X)
      naturality _ _ f := (bifibrantResolutionMap_fac' f).symm }

lemma œÄ.adj.unit_app (X : CofibrantObject C) :
    œÄ.adj.unit.app (toœÄ.obj X) =
      toœÄ.map (iBifibrantResolutionObj X) := rfl

noncomputable def œÄ.adj.counit' :
    ùü≠ (BifibrantObject.œÄ C) ‚ü∂ BifibrantObject.œÄ.ŒπCofibrantObject ‚ãô bifibrantResolution :=
  Quotient.natTransLift _
    { app X := BifibrantObject.toœÄ.map (iBifibrantResolutionObj (.mk X.obj))
      naturality X‚ÇÅ X‚ÇÇ f := BifibrantObject.toœÄ.congr_map
        (bifibrantResolutionMap_fac (f : .mk X‚ÇÅ.obj ‚ü∂ .mk X‚ÇÇ.obj )).symm }

lemma œÄ.adj.counit'_app (X : BifibrantObject C) :
    œÄ.adj.counit'.app (BifibrantObject.toœÄ.obj X) =
      BifibrantObject.toœÄ.map (iBifibrantResolutionObj (.mk X.obj)) := rfl

instance (X : BifibrantObject.œÄ C) : IsIso (œÄ.adj.counit'.app X) := by
  obtain ‚ü®X, rfl‚ü© := BifibrantObject.toœÄ_obj_surjective X
  rw [œÄ.adj.counit'_app]
  have : WeakEquivalence (C := BifibrantObject C) ((mk X.obj).iBifibrantResolutionObj) := by
    rw [weakEquivalence_iff_Œπ_map]
    change WeakEquivalence (Œπ.map (CofibrantObject.mk X.obj).iBifibrantResolutionObj)
    infer_instance
  infer_instance

instance : IsIso (œÄ.adj.counit' (C := C)) := NatIso.isIso_of_isIso_app _

noncomputable def œÄ.adj.counitIso :
    BifibrantObject.œÄ.ŒπCofibrantObject ‚ãô bifibrantResolution ‚âÖ ùü≠ (BifibrantObject.œÄ C) :=
  (asIso œÄ.adj.counit').symm

lemma œÄ.adj.counitIso_inv_app (X : BifibrantObject C) :
    œÄ.adj.counitIso.inv.app (BifibrantObject.toœÄ.obj X) =
      BifibrantObject.toœÄ.map (iBifibrantResolutionObj (.mk X.obj)) := rfl

noncomputable def œÄ.adj :
    œÄ.bifibrantResolution (C := C) ‚ä£ BifibrantObject.œÄ.ŒπCofibrantObject where
  unit := œÄ.adj.unit
  counit := œÄ.adj.counitIso.hom
  left_triangle_components X := by
    obtain ‚ü®X, rfl‚ü© := toœÄ_obj_surjective X
    rw [‚Üê cancel_mono (œÄ.adj.counitIso.inv.app _), Category.assoc, Iso.hom_inv_id_app]
    dsimp
    apply bifibrantResolutionObj_hom_ext
    rw [Category.comp_id, Category.id_comp, œÄ.adj.unit_app,
      bifibrantResolution_map, œÄ.adj.counitIso_inv_app,
      bifibrantResolutionMap_fac']
    rfl
  right_triangle_components X := by
    obtain ‚ü®X, rfl‚ü© := BifibrantObject.toœÄ_obj_surjective X
    rw [‚Üê cancel_mono (BifibrantObject.œÄ.ŒπCofibrantObject.map (œÄ.adj.counitIso.inv.app _)),
      Category.assoc, ‚Üê Functor.map_comp, Iso.hom_inv_id_app]
    simp only [Functor.id_obj, Functor.comp_obj, CategoryTheory.Functor.map_id, Category.comp_id,
      Category.id_comp]
    rfl

end CofibrantObject

namespace FibrantObject

variable {C}

lemma exists_bifibrant (X : FibrantObject C) :
    ‚àÉ (Y : BifibrantObject C) (p : BifibrantObject.ŒπFibrantObject.obj Y ‚ü∂ X),
      Fibration (Œπ.map p) ‚àß WeakEquivalence (Œπ.map p) := by
  have h := MorphismProperty.factorizationData (cofibrations C) (trivialFibrations C)
      (initial.to X.obj)
  have := isFibrant_of_fibration h.p
  have : IsCofibrant h.Z := by
    rw [isCofibrant_iff_of_isInitial h.i initialIsInitial]
    infer_instance
  exact ‚ü®BifibrantObject.mk h.Z, h.p, inferInstanceAs (Fibration h.p),
    inferInstanceAs (WeakEquivalence h.p)‚ü©

-- TODO: dualize

end FibrantObject

namespace BifibrantObject

@[simps]
def ŒπCofibrantObjectLocalizerMorphism :
    LocalizerMorphism (weakEquivalences (BifibrantObject C))
      (weakEquivalences (CofibrantObject C)) where
  functor := ŒπCofibrantObject
  map _ _ _ h := h

@[simps]
def ŒπFibrantObjectLocalizerMorphism :
    LocalizerMorphism (weakEquivalences (BifibrantObject C))
      (weakEquivalences (FibrantObject C)) where
  functor := ŒπFibrantObject
  map _ _ _ h := h

--instance : (ŒπCofibrantObjectLocalizerMorphism C).IsLocalizedEquivalence := sorry

end BifibrantObject



end HomotopicalAlgebra
