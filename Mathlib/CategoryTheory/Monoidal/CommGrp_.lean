/-
Copyright (c) 2025 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathlib.CategoryTheory.Monoidal.Grp_
import Mathlib.CategoryTheory.Monoidal.CommMon_

/-!
# The category of commutative groups in a Cartesian monoidal category
-/

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory Category Limits MonoidalCategory CartesianMonoidalCategory Mon Grp CommMon
open MonObj

variable (C : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [CartesianMonoidalCategory.{v‚ÇÅ} C] [BraidedCategory C]

/-- A commutative group object internal to a Cartesian monoidal category. -/
structure CommGrp where
  /-- The underlying object in the ambient monoidal category -/
  X : C
  [grp : GrpObj X]
  [comm : IsCommMonObj X]

@[deprecated (since := "2025-10-13")] alias CommGrp_ := CommGrp

attribute [instance] CommGrp.grp CommGrp.comm

namespace CommGrp

variable {C}

/-- A commutative group object is a group object. -/
@[simps X]
def toGrp (A : CommGrp C) : Grp C := ‚ü®A.X‚ü©

@[deprecated (since := "2025-10-13")] alias toGrp_ := toGrp

/-- A commutative group object is a commutative monoid object. -/
@[simps X]
def toCommMon (A : CommGrp C) : CommMon C := ‚ü®A.X‚ü©

@[deprecated (since := "2025-09-15")] alias toCommMon_ := toCommMon

/-- A commutative group object is a monoid object. -/
abbrev toMon (A : CommGrp C) : Mon C := (toCommMon A).toMon

@[deprecated (since := "2025-09-15")] alias toMon_ := toMon

variable (C) in
/-- The trivial commutative group object. -/
@[simps!]
def trivial : CommGrp C := { X := ùüô_ C }

instance : Inhabited (CommGrp C) where
  default := trivial C

instance : Category (CommGrp C) :=
  inferInstanceAs (Category (InducedCategory _ CommGrp.toGrp))

@[simp]
theorem id_hom (A : CommGrp C) : (InducedCategory.Hom.hom (ùüô A)) = ùüô A.toGrp :=
  rfl

@[simp]
theorem comp_hom {R S T : CommGrp C} (f : R ‚ü∂ S) (g : S ‚ü∂ T) :
    (f ‚â´ g).hom = f.hom ‚â´ g.hom :=
  rfl

@[ext]
theorem hom_ext {A B : CommGrp C} (f g : A ‚ü∂ B) (h : f.hom.hom.hom = g.hom.hom.hom) : f = g :=
  InducedCategory.hom_ext (Grp.hom_ext _ _ h)

@[deprecated (since := "2025-07-03")] alias id' := id_hom
@[deprecated (since := "2025-07-03")] alias comp' := comp_hom

section

variable (C)

/-- The forgetful functor from commutative group objects to group objects. -/
@[simps! obj_X]
def forget‚ÇÇGrp : CommGrp C ‚•§ Grp C :=
  inducedFunctor CommGrp.toGrp

@[deprecated (since := "2025-10-13")] alias forget‚ÇÇGrp_ := forget‚ÇÇGrp

/-- The forgetful functor from commutative group objects to group objects is fully faithful. -/
def fullyFaithfulForget‚ÇÇGrp : (forget‚ÇÇGrp C).FullyFaithful :=
  fullyFaithfulInducedFunctor _

@[deprecated (since := "2025-10-13")] alias fullyFaithfulForget‚ÇÇGrp_ := fullyFaithfulForget‚ÇÇGrp

instance : (forget‚ÇÇGrp C).Full := InducedCategory.full _
instance : (forget‚ÇÇGrp C).Faithful := InducedCategory.faithful _

@[simp]
theorem forget‚ÇÇGrp_obj_one (A : CommGrp C) : Œ∑[((forget‚ÇÇGrp C).obj A).X] = Œ∑[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇGrp_obj_mul (A : CommGrp C) : Œº[((forget‚ÇÇGrp C).obj A).X] = Œº[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇGrp_map_hom {A B : CommGrp C} (f : A ‚ü∂ B) :
    ((forget‚ÇÇGrp C).map f).hom = f.hom.hom :=
  rfl

/-- The forgetful functor from commutative group objects to commutative monoid objects. -/
def forget‚ÇÇCommMon : CommGrp C ‚•§ CommMon C where
  obj G := CommMon.mk G.X
  map f := CommMon.homMk f.hom.hom

@[deprecated (since := "2025-09-15")] alias forget‚ÇÇCommMon_ := forget‚ÇÇCommMon

/-- The forgetful functor from commutative group objects to commutative monoid objects is fully
faithful. -/
def fullyFaithfulForget‚ÇÇCommMon : (forget‚ÇÇCommMon C).FullyFaithful where
  preimage f := InducedCategory.homMk (Grp.homMk' f.hom)

instance : (forget‚ÇÇCommMon C).Full := (fullyFaithfulForget‚ÇÇCommMon _).full
instance : (forget‚ÇÇCommMon C).Faithful := (fullyFaithfulForget‚ÇÇCommMon _).faithful

@[simp]
theorem forget‚ÇÇCommMon_obj_one (A : CommGrp C) : Œ∑[((forget‚ÇÇCommMon C).obj A).X] = Œ∑[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇCommMon_obj_mul (A : CommGrp C) : Œº[((forget‚ÇÇCommMon C).obj A).X] = Œº[A.X] :=
  rfl

@[simp]
theorem forget‚ÇÇCommMon_map_hom {A B : CommGrp C} (f : A ‚ü∂ B) :
    ((forget‚ÇÇCommMon C).map f).hom = f.hom.hom :=
  rfl

/-- The forgetful functor from commutative group objects to the ambient category. -/
@[simps!]
def forget : CommGrp C ‚•§ C :=
  forget‚ÇÇGrp C ‚ãô Grp.forget C

instance : (forget C).Faithful where

@[simp]
theorem forget‚ÇÇGrp_comp_forget : forget‚ÇÇGrp C ‚ãô Grp.forget C = forget C := rfl

@[simp]
theorem forget‚ÇÇCommMon_comp_forget : forget‚ÇÇCommMon C ‚ãô CommMon.forget C = forget C := rfl

instance {G H : CommGrp C} {f : G ‚ü∂ H} [IsIso f] : IsIso f.hom :=
  inferInstanceAs (IsIso ((forget‚ÇÇGrp C).map f))

instance {G H : CommGrp C} {f : G ‚ü∂ H} [IsIso f] : IsIso f.hom.hom :=
  inferInstanceAs (IsIso ((forget‚ÇÇGrp C ‚ãô Grp.forget‚ÇÇMon C).map f))

end

/-- Construct an isomorphism of commutative group objects by giving a monoid isomorphism between the
underlying objects. -/
@[simps!]
def mkIso' {G H : C} (e : G ‚âÖ H) [GrpObj G] [IsCommMonObj G] [GrpObj H] [IsCommMonObj H]
    [IsMonHom e.hom] : mk G ‚âÖ mk H :=
  (fullyFaithfulForget‚ÇÇGrp C).preimageIso (Grp.mkIso' e)

section

variable {G H : CommGrp C} (e : G.X ‚âÖ H.X) (one_f : Œ∑[G.X] ‚â´ e.hom = Œ∑[H.X] := by cat_disch)
  (mul_f : Œº[G.X] ‚â´ e.hom = (e.hom ‚äó‚Çò e.hom) ‚â´ Œº[H.X] := by cat_disch)

/-- Construct an isomorphism of group objects by giving an isomorphism between the underlying
objects and checking compatibility with unit and multiplication only in the forward direction. -/
abbrev mkIso : G ‚âÖ H :=
  have : IsMonHom e.hom := ‚ü®one_f, mul_f‚ü©
  mkIso' e

@[simp] lemma mkIso_hom_hom_hom_hom : (mkIso e one_f mul_f).hom.hom.hom.hom = e.hom := rfl
@[simp] lemma mkIso_inv_hom_hom_hom : (mkIso e one_f mul_f).inv.hom.hom.hom = e.inv := rfl

@[deprecated (since := "2025-07-03")] alias mkIso_hom_hom := mkIso_hom_hom_hom_hom
@[deprecated (since := "2025-07-03")] alias mkIso_inv_hom := mkIso_inv_hom_hom_hom

end

instance uniqueHomFromTrivial (A : CommGrp C) : Unique (trivial C ‚ü∂ A) :=
  Equiv.unique (show _ ‚âÉ (Grp.trivial C ‚ü∂ A.toGrp) from
    InducedCategory.homEquiv)

instance : HasInitial (CommGrp C) :=
  hasInitial_of_unique (trivial C)

end CommGrp

namespace CategoryTheory
variable {C}
  {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] [CartesianMonoidalCategory D] [BraidedCategory D]
  {E : Type u‚ÇÉ} [Category.{v‚ÇÉ} E] [CartesianMonoidalCategory E] [BraidedCategory E]

namespace Functor
variable {F F' : C ‚•§ D} [F.Braided] [F'.Braided] {G : D ‚•§ E} [G.Braided]

open Monoidal

variable (F) in
/-- A finite-product-preserving functor takes commutative group objects to commutative group
objects. -/
@[simps!]
def mapCommGrp : CommGrp C ‚•§ CommGrp D where
  obj A :=
    { F.mapGrp.obj A.toGrp with
      comm :=
        { mul_comm := by
            dsimp
            rw [‚Üê Functor.LaxBraided.braided_assoc, ‚Üê Functor.map_comp, IsCommMonObj.mul_comm] } }
  map f := InducedCategory.homMk (F.mapGrp.map f.hom)

protected instance Faithful.mapCommGrp [F.Faithful] : F.mapCommGrp.Faithful where
  map_injective hfg :=
    (CommGrp.forget _ ‚ãô F).map_injective ((CommGrp.forget _).congr_map hfg)

/-- If `F : C ‚•§ D` is a fully faithful monoidal functor, then
`CommGrpCat(F) : CommGrpCat C ‚•§ CommGrpCat D` is fully faithful too. -/
@[simps]
protected def FullyFaithful.mapCommGrp (hF : F.FullyFaithful) : F.mapCommGrp.FullyFaithful where
  preimage f := InducedCategory.homMk (Grp.homMk' (hF.mapMon.preimage f.hom.hom))

protected instance Full.mapCommGrp [F.Full] [F.Faithful] : F.mapCommGrp.Full :=
  (FullyFaithful.ofFullyFaithful F).mapCommGrp.full

@[simp]
theorem mapCommGrp_id_one (A : CommGrp C) :
    Œ∑[((ùü≠ C).mapCommGrp.obj A).X] = ùüô _ ‚â´ Œ∑[A.X] :=
  rfl

@[simp]
theorem mapCommpGrp_id_mul (A : CommGrp C) :
    Œº[((ùü≠ C).mapCommGrp.obj A).X] = ùüô _ ‚â´ Œº[A.X] :=
  rfl

@[simp]
theorem comp_mapCommGrp_one (A : CommGrp C) :
    Œ∑[((F ‚ãô G).mapCommGrp.obj A).X] = LaxMonoidal.Œµ (F ‚ãô G) ‚â´ (F ‚ãô G).map Œ∑[A.X] :=
  rfl

@[simp]
theorem comp_mapCommGrp_mul (A : CommGrp C) :
    Œº[((F ‚ãô G).mapCommGrp.obj A).X] = LaxMonoidal.Œº (F ‚ãô G) _ _ ‚â´ (F ‚ãô G).map Œº[A.X] :=
  rfl

/-- The identity functor is also the identity on commutative group objects. -/
@[simps!]
def mapCommGrpIdIso : mapCommGrp (ùü≠ C) ‚âÖ ùü≠ (CommGrp C) :=
  NatIso.ofComponents (fun X ‚Ü¶ CommGrp.mkIso (.refl _) (by simp)
    (by simp))

/-- The composition functor is also the composition on commutative group objects. -/
@[simps!]
def mapCommGrpCompIso : (F ‚ãô G).mapCommGrp ‚âÖ F.mapCommGrp ‚ãô G.mapCommGrp :=
  NatIso.ofComponents fun X ‚Ü¶ CommGrp.mkIso (.refl _)

/-- Natural transformations between functors lift to commutative group objects. -/
@[simps!]
def mapCommGrpNatTrans (f : F ‚ü∂ F') : F.mapCommGrp ‚ü∂ F'.mapCommGrp where
  app X := InducedCategory.homMk ((mapGrpNatTrans f).app X.toGrp)

/-- Natural isomorphisms between functors lift to commutative group objects. -/
@[simps!]
def mapCommGrpNatIso (e : F ‚âÖ F') : F.mapCommGrp ‚âÖ F'.mapCommGrp :=
  NatIso.ofComponents fun X ‚Ü¶ CommGrp.mkIso (e.app _)

attribute [local instance] Functor.Braided.ofChosenFiniteProducts in
/-- `mapCommGrp` is functorial in the left-exact functor. -/
@[simps]
noncomputable def mapCommGrpFunctor : (C ‚•§‚Çó D) ‚•§ CommGrp C ‚•§ CommGrp D where
  obj F := F.1.mapCommGrp
  map Œ± := mapCommGrpNatTrans Œ±.hom

end Functor

open Functor

namespace Adjunction
variable {F : C ‚•§ D} {G : D ‚•§ C} (a : F ‚ä£ G) [F.Braided] [G.Braided]

/-- An adjunction of braided functors lifts to an adjunction of their lifts to commutative group
objects. -/
@[simps] noncomputable def mapCommGrp : F.mapCommGrp ‚ä£ G.mapCommGrp where
  unit := mapCommGrpIdIso.inv ‚â´ mapCommGrpNatTrans a.unit ‚â´ mapCommGrpCompIso.hom
  counit := mapCommGrpCompIso.inv ‚â´ mapCommGrpNatTrans a.counit ‚â´ mapCommGrpIdIso.hom

end Adjunction

namespace Equivalence
variable (e : C ‚âå D) [e.functor.Braided] [e.inverse.Braided]

/-- An equivalence of categories lifts to an equivalence of their commutative group objects. -/
@[simps] noncomputable def mapCommGrp : CommGrp C ‚âå CommGrp D where
  functor := e.functor.mapCommGrp
  inverse := e.inverse.mapCommGrp
  unitIso := mapCommGrpIdIso.symm ‚â™‚â´ mapCommGrpNatIso e.unitIso ‚â™‚â´ mapCommGrpCompIso
  counitIso := mapCommGrpCompIso.symm ‚â™‚â´ mapCommGrpNatIso e.counitIso ‚â™‚â´ mapCommGrpIdIso

end CategoryTheory.Equivalence
