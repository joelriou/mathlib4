/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, Jo√´l Riou
-/
import Mathlib.CategoryTheory.Comma.Presheaf.Basic
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Functor.KanExtension.Adjunction
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Limits.Over

/-!
# Colimit of representables

This file constructs an adjunction `Presheaf.yonedaAdjunction` between `(C·µí·µñ ‚•§ Type u)` and
`‚Ñ∞` given a functor `A : C ‚•§ ‚Ñ∞`, where the right adjoint `restrictedYoneda`
sends `(E : ‚Ñ∞)` to `c ‚Ü¶ (A.obj c ‚ü∂ E)`, and the left adjoint `(C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ ‚Ñ∞`
is a pointwise left Kan extension of `A` along the Yoneda embedding, which
exists provided `‚Ñ∞` has colimits)

We also show that every presheaf is a colimit of representables. This result
is also known as the density theorem, the co-Yoneda lemma and
the Ninja Yoneda lemma. Two formulations are given:
* `colimitOfRepresentable` uses the category of elements of a functor to types;
* `isColimitTautologicalCocone` uses the category of costructured arrows.

In the lemma `isLeftKanExtension_along_yoneda_iff`, we show that
if `L : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ ‚Ñ∞)` and `Œ± : A ‚ü∂ yoneda ‚ãô L`, then
`Œ±` makes `L` the left Kan extension of `L` along yoneda if and only if
`Œ±` is an isomorphism (i.e. `L` extends `A`) and `L` preserves colimits.
`uniqueExtensionAlongYoneda` shows `yoneda.leftKanExtension A` is unique amongst
functors preserving colimits with this property, establishing the
presheaf category as the free cocompletion of a category.

Given a functor `F : C ‚•§ D`, we also show construct an
isomorphism `compYonedaIsoYonedaCompLan : F ‚ãô yoneda ‚âÖ yoneda ‚ãô F.op.lan`, and
show that it makes `F.op.lan` a left Kan extension of `F ‚ãô yoneda`.

## Tags
colimit, representable, presheaf, free cocompletion

## References
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
* https://ncatlab.org/nlab/show/Yoneda+extension
-/

namespace CategoryTheory

open Category Limits Opposite

universe w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C]

namespace Presheaf

variable {‚Ñ∞ : Type u‚ÇÇ} [Category.{v‚ÇÇ} ‚Ñ∞] (A : C ‚•§ ‚Ñ∞)

/--
The functor taking `(E : ‚Ñ∞) (c : C·µí·µñ)` to the homset `(A.obj C ‚ü∂ E)`. It is shown in `L_adjunction`
that this functor has a left adjoint (provided `E` has colimits) given by taking colimits over
categories of elements.
In the case where `‚Ñ∞ = C·µí·µñ ‚•§ Type u` and `A = yoneda`, this functor is isomorphic to the identity.

Defined as in [MM92], Chapter I, Section 5, Theorem 2.
-/
@[simps! obj_map map_app]
def restrictedULiftYoneda : ‚Ñ∞ ‚•§ C·µí·µñ ‚•§ Type (max w v‚ÇÇ) :=
    uliftYoneda.{w} ‚ãô (Functor.whiskeringLeft _ _ _).obj A.op

/-- Auxiliary definition for `restrictedULiftYonedaHomEquiv`. -/
def restrictedULiftYonedaHomEquiv' (P : C·µí·µñ ‚•§ Type (max w v‚ÇÅ v‚ÇÇ)) (E : ‚Ñ∞) :
    (CostructuredArrow.proj uliftYoneda.{max w v‚ÇÇ} P ‚ãô A ‚ü∂
      (Functor.const (CostructuredArrow uliftYoneda.{max w v‚ÇÇ} P)).obj E) ‚âÉ
      (P ‚ü∂ (restrictedULiftYoneda.{max w v‚ÇÅ} A).obj E) where
  toFun f :=
    { app _ x := ULift.up (f.app (CostructuredArrow.mk (uliftYonedaEquiv.symm x)))
      naturality _ _ g := by
        ext x
        let œÜ : CostructuredArrow.mk (uliftYonedaEquiv.{max w v‚ÇÇ}.symm (P.map g x)) ‚ü∂
          CostructuredArrow.mk (uliftYonedaEquiv.symm x) :=
            CostructuredArrow.homMk g.unop (by
              dsimp
              rw [uliftYonedaEquiv_symm_map])
        dsimp
        congr 1
        simpa using (f.naturality œÜ).symm }
  invFun g :=
    { app y := (uliftYonedaEquiv.{max w v‚ÇÇ} (y.hom ‚â´ g)).down
      naturality := by
        sorry }
  left_inv f := by
    ext X
    let e : CostructuredArrow.mk
      (uliftYonedaEquiv.{max w v‚ÇÇ}.symm (X.hom.app (op X.left) ‚ü®ùüô X.left‚ü©)) ‚âÖ X :=
        CostructuredArrow.isoMk (Iso.refl _) (by
          ext Y x
          dsimp
          rw [‚Üê FunctorToTypes.naturality]
          simp [uliftYoneda]
          rfl )
    simpa [e] using f.naturality e.inv
  right_inv g := by
    ext X x
    apply ULift.down_injective
    dsimp
    rw [uliftYonedaEquiv_comp, Equiv.apply_symm_apply]

@[reassoc]
lemma restrictedULiftYonedaHomEquiv'_symm_naturality_right (P : C·µí·µñ ‚•§ Type (max w v‚ÇÅ v‚ÇÇ)) {E E' : ‚Ñ∞}
    (g : E ‚ü∂ E') (f : (P ‚ü∂ (restrictedULiftYoneda.{max w v‚ÇÅ} A).obj E)) :
    (restrictedULiftYonedaHomEquiv' A P E').symm (f ‚â´ (restrictedULiftYoneda A).map g) =
      (restrictedULiftYonedaHomEquiv' A P E).symm f ‚â´ (Functor.const _ ).map g := by
  rfl

@[reassoc]
lemma restrictedULiftYonedaHomEquiv'_symm_app_naturality_left
    {P Q : C·µí·µñ ‚•§ Type (max w v‚ÇÅ v‚ÇÇ)} (f : P ‚ü∂ Q) (E : ‚Ñ∞)
    (g : (Q ‚ü∂ (restrictedULiftYoneda.{max w v‚ÇÅ} A).obj E))
    (p : CostructuredArrow uliftYoneda.{max w v‚ÇÇ} P) :
    ((restrictedULiftYonedaHomEquiv' A P E).symm (f ‚â´ g)).app p =
      ((restrictedULiftYonedaHomEquiv' A Q E).symm g).app
        ((CostructuredArrow.map f).obj p) :=
  rfl

section

variable (P : ‚Ñ∞·µí·µñ ‚•§ Type (max w v‚ÇÅ v‚ÇÇ))

example [HasColimitsOfSize.{v‚ÇÅ, max u‚ÇÅ v‚ÇÅ v‚ÇÇ w} ‚Ñ∞] :
    (uliftYoneda.{max w v‚ÇÇ}).HasPointwiseLeftKanExtension A := by
  infer_instance

variable [(uliftYoneda.{max w v‚ÇÇ}).HasPointwiseLeftKanExtension A]

variable {A}
variable (L : (C·µí·µñ ‚•§ Type max w v‚ÇÅ v‚ÇÇ) ‚•§ ‚Ñ∞)
  (Œ± : A ‚ü∂ uliftYoneda.{max w v‚ÇÇ} ‚ãô L) [L.IsLeftKanExtension Œ±]

/-- Auxiliary definition for `uliftYonedaAdjunction`. -/
noncomputable def restrictedULiftYonedaHomEquiv (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ v‚ÇÇ) (E : ‚Ñ∞) :
    (L.obj P ‚ü∂ E) ‚âÉ (P ‚ü∂ (restrictedULiftYoneda.{max w v‚ÇÅ} A).obj E) :=
  (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension _ Œ± P).homEquiv.trans
    (restrictedULiftYonedaHomEquiv' A P E)

/-- If `L : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ ‚Ñ∞` is a pointwise left Kan extension
of a functor `A : C ‚•§ ‚Ñ∞` along the Yoneda embedding,
then `L` is a left adjoint of `restrictedYoneda A : ‚Ñ∞ ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ` -/
noncomputable def uliftYonedaAdjunction : L ‚ä£ restrictedULiftYoneda.{max w v‚ÇÅ} A :=
  Adjunction.mkOfHomEquiv
    { homEquiv := restrictedULiftYonedaHomEquiv L Œ±
      homEquiv_naturality_left_symm := fun {P Q X} f g => by
        apply (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension L Œ± P).hom_ext
        intro p
        have hfg := (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension
          L Œ± P).comp_homEquiv_symm ((restrictedULiftYonedaHomEquiv' A P X).symm (f ‚â´ g)) p
        have hg := (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension
          L Œ± Q).comp_homEquiv_symm ((restrictedULiftYonedaHomEquiv' A Q X).symm g)
            ((CostructuredArrow.map f).obj p)
        dsimp at hfg hg
        dsimp [restrictedULiftYonedaHomEquiv]
        simp only [assoc, hfg, ‚Üê L.map_comp_assoc, hg,
          restrictedULiftYonedaHomEquiv'_symm_app_naturality_left]
      homEquiv_naturality_right := fun {P X Y} f g => by
        have := @IsColimit.homEquiv_symm_naturality (h :=
          Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension L Œ± P)
        dsimp at this
        apply (restrictedULiftYonedaHomEquiv L Œ± P Y).symm.injective
        apply (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension L Œ± P).hom_ext
        intro
        simp [restrictedULiftYonedaHomEquiv,
          restrictedULiftYonedaHomEquiv'_symm_naturality_right, this] }

include Œ± in
/-- Any left Kan extension along the Yoneda embedding preserves colimits. -/
lemma preservesColimitsOfSize_of_isLeftKanExtension :
    PreservesColimitsOfSize.{v‚ÇÉ, u‚ÇÉ} L :=
  (uliftYonedaAdjunction L Œ±).leftAdjoint_preservesColimits

lemma isIso_of_isLeftKanExtension : IsIso Œ± :=
  (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension _ Œ±).isIso_hom

variable (A)

/-- See Property 2 of https://ncatlab.org/nlab/show/Yoneda+extension#properties. -/
noncomputable instance preservesColimitsOfSize_leftKanExtension :
    PreservesColimitsOfSize.{v‚ÇÉ, u‚ÇÉ} (uliftYoneda.{max w v‚ÇÇ}.leftKanExtension A) :=
  (uliftYonedaAdjunction _ (uliftYoneda.leftKanExtensionUnit A)).leftAdjoint_preservesColimits

instance : IsIso (uliftYoneda.{max w v‚ÇÇ}.leftKanExtensionUnit A) :=
  isIso_of_isLeftKanExtension _ (uliftYoneda.leftKanExtensionUnit A)

/-- A pointwise left Kan extension along the Yoneda embedding is an extension. -/
noncomputable def isExtensionAlongULiftYoneda :
    uliftYoneda.{max w v‚ÇÇ} ‚ãô uliftYoneda.leftKanExtension A ‚âÖ A :=
  (asIso (uliftYoneda.leftKanExtensionUnit A)).symm

end

/-- A functor to the presheaf category in which everything in the image is representable (witnessed
by the fact that it factors through the yoneda embedding).
`coconeOfRepresentable` gives a cocone for this functor which is a colimit and has point `P`.
-/
@[simps! obj map]
def functorToRepresentables (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ) :
    P.Elements·µí·µñ ‚•§ C·µí·µñ ‚•§ Type (max w v‚ÇÅ) :=
  (CategoryOfElements.œÄ P).leftOp ‚ãô uliftYoneda.{w}

/-- This is a cocone with point `P` for the functor `functorToRepresentables P`. It is shown in
`colimitOfRepresentable P` that this cocone is a colimit: that is, we have exhibited an arbitrary
presheaf `P` as a colimit of representables.

The construction of [MM92], Chapter I, Section 5, Corollary 3.
-/
@[simps]
noncomputable def coconeOfRepresentable (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ) :
    Cocone (functorToRepresentables P) where
  pt := P
  Œπ :=
    { app x := uliftYonedaEquiv.symm x.unop.2
      naturality := fun {x‚ÇÅ x‚ÇÇ} f => by
        dsimp
        rw [comp_id, ‚Üê uliftYonedaEquiv_symm_map, f.unop.2] }

/-- The legs of the cocone `coconeOfRepresentable` are natural in the choice of presheaf. -/
theorem coconeOfRepresentable_naturality
    {P‚ÇÅ P‚ÇÇ : C·µí·µñ ‚•§ Type max w v‚ÇÅ} (Œ± : P‚ÇÅ ‚ü∂ P‚ÇÇ) (j : P‚ÇÅ.Elements·µí·µñ) :
    (coconeOfRepresentable P‚ÇÅ).Œπ.app j ‚â´ Œ± =
      (coconeOfRepresentable P‚ÇÇ).Œπ.app ((CategoryOfElements.map Œ±).op.obj j) := by
  ext T f
  simp [uliftYonedaEquiv, FunctorToTypes.naturality]

/-- The cocone with point `P` given by `coconeOfRepresentable` is a colimit:
that is, we have exhibited an arbitrary presheaf `P` as a colimit of representables.

The result of [MM92], Chapter I, Section 5, Corollary 3.
-/
noncomputable def colimitOfRepresentable (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ) :
    IsColimit (coconeOfRepresentable P) where
  desc s :=
    { app X x := uliftYonedaEquiv (s.Œπ.app (Opposite.op (Functor.elementsMk P X x)))
      naturality X Y f := by
        ext x
        have := s.w (Quiver.Hom.op (CategoryOfElements.homMk (P.elementsMk X x)
          (P.elementsMk Y (P.map f x)) f rfl))
        dsimp at this x ‚ä¢
        rw [‚Üê this, uliftYonedaEquiv_comp]
        dsimp
        rw [uliftYonedaEquiv_apply, ‚Üê FunctorToTypes.naturality,
          uliftYonedaEquiv_uliftYoneda_map]
        simp [uliftYoneda] }
  fac s j := by
    ext X x
    let œÜ : j.unop ‚ü∂ (Functor.elementsMk P _
      ((uliftYonedaEquiv.symm (unop j).snd).app X x)) := ‚ü®x.down.op, rfl‚ü©
    have := s.w œÜ.op
    dsimp [œÜ] at this x ‚ä¢
    rw [‚Üê this, uliftYonedaEquiv_apply]
    dsimp [uliftYoneda]
    rw [id_comp]
  uniq s m hm := by
    ext X x
    dsimp at hm ‚ä¢
    rw [‚Üê hm, uliftYonedaEquiv_comp, Equiv.apply_symm_apply]

variable {A : C ‚•§ ‚Ñ∞}

example [HasColimitsOfSize.{v‚ÇÅ, max w u‚ÇÅ v‚ÇÅ v‚ÇÇ} ‚Ñ∞] :
    uliftYoneda.{max w v‚ÇÇ}.HasPointwiseLeftKanExtension A := by
  infer_instance

variable [uliftYoneda.{max w v‚ÇÇ}.HasPointwiseLeftKanExtension A]

section

variable (L : (C·µí·µñ ‚•§ Type max w v‚ÇÅ v‚ÇÇ) ‚•§ ‚Ñ∞) (Œ± : A ‚ü∂ uliftYoneda.{max w v‚ÇÇ} ‚ãô L)

instance [L.IsLeftKanExtension Œ±] : IsIso Œ± :=
  (Functor.isPointwiseLeftKanExtensionOfIsLeftKanExtension L Œ±).isIso_hom

lemma isLeftKanExtension_along_uliftYoneda_iff :
    L.IsLeftKanExtension Œ± ‚Üî
      (IsIso Œ± ‚àß PreservesColimitsOfSize.{v‚ÇÅ, max w u‚ÇÅ v‚ÇÅ v‚ÇÇ} L) := by
  constructor
  ¬∑ intro
    exact ‚ü®inferInstance, preservesColimits_of_natIso (Functor.leftKanExtensionUnique _
      (uliftYoneda.{max w v‚ÇÇ}.leftKanExtensionUnit A) _ Œ±)‚ü©
  ¬∑ rintro ‚ü®_, _‚ü©
    apply Functor.LeftExtension.IsPointwiseLeftKanExtension.isLeftKanExtension
      (E := Functor.LeftExtension.mk _ Œ±)
    intro P
    dsimp [Functor.LeftExtension.IsPointwiseLeftKanExtensionAt]
    apply IsColimit.ofWhiskerEquivalence
      (CategoryOfElements.costructuredArrowULiftYonedaEquivalence _)
    let e : (CategoryOfElements.costructuredArrowULiftYonedaEquivalence P).functor ‚ãô
      CostructuredArrow.proj uliftYoneda.{max w v‚ÇÇ} P ‚ãô A ‚âÖ
        functorToRepresentables.{max w v‚ÇÇ} P ‚ãô L :=
      Functor.isoWhiskerLeft _ (Functor.isoWhiskerLeft _ (asIso Œ±)) ‚â™‚â´
        Functor.isoWhiskerLeft _ (Functor.associator _ _ _).symm ‚â™‚â´
        (Functor.associator _ _ _).symm ‚â™‚â´ Functor.isoWhiskerRight (Iso.refl _) L
    refine (IsColimit.precomposeHomEquiv e.symm _).1 ?_
    exact IsColimit.ofIsoColimit (isColimitOfPreserves L (colimitOfRepresentable.{max w v‚ÇÇ} P))
      (Cocones.ext (Iso.refl _))

lemma isLeftKanExtension_of_preservesColimits
    (L : (C·µí·µñ ‚•§ Type max w v‚ÇÅ v‚ÇÇ) ‚•§ ‚Ñ∞) (e : A ‚âÖ uliftYoneda.{max w v‚ÇÇ} ‚ãô L)
    [PreservesColimitsOfSize.{v‚ÇÅ, max w u‚ÇÅ v‚ÇÅ v‚ÇÇ} L] :
    L.IsLeftKanExtension e.hom := by
  rw [isLeftKanExtension_along_uliftYoneda_iff]
  exact ‚ü®inferInstance, ‚ü®inferInstance‚ü©‚ü©

end

/-- Show that `yoneda.leftKanExtension A` is the unique colimit-preserving
functor which extends `A` to the presheaf category.

The second part of [MM92], Chapter I, Section 5, Corollary 4.
See Property 3 of https://ncatlab.org/nlab/show/Yoneda+extension#properties.
-/
noncomputable def uniqueExtensionAlongULiftYoneda (L : (C·µí·µñ ‚•§ Type max w v‚ÇÅ v‚ÇÇ) ‚•§ ‚Ñ∞)
    (e : A ‚âÖ uliftYoneda.{max w v‚ÇÇ} ‚ãô L)
    [PreservesColimitsOfSize.{v‚ÇÅ, max w u‚ÇÅ v‚ÇÅ v‚ÇÇ} L] :
    L ‚âÖ uliftYoneda.{max w v‚ÇÇ}.leftKanExtension A :=
  have := isLeftKanExtension_of_preservesColimits L e
  Functor.leftKanExtensionUnique _ e.hom _ (uliftYoneda.leftKanExtensionUnit A)

instance (L : (C·µí·µñ ‚•§ Type max w v‚ÇÅ v‚ÇÇ) ‚•§ ‚Ñ∞) [PreservesColimitsOfSize.{v‚ÇÅ, max w u‚ÇÅ v‚ÇÅ v‚ÇÇ} L]
    [uliftYoneda.{max w v‚ÇÇ}.HasPointwiseLeftKanExtension (uliftYoneda.{max w v‚ÇÇ} ‚ãô L)] :
    L.IsLeftKanExtension (ùüô _ : uliftYoneda.{max w v‚ÇÇ} ‚ãô L ‚ü∂ _) :=
  isLeftKanExtension_of_preservesColimits _ (Iso.refl _)

/-- If `L` preserves colimits and `‚Ñ∞` has them, then it is a left adjoint. Note this is a (partial)
converse to `leftAdjointPreservesColimits`.
-/
lemma isLeftAdjoint_of_preservesColimits (L : (C ‚•§ Type max w v‚ÇÅ v‚ÇÇ) ‚•§ ‚Ñ∞)
    [PreservesColimitsOfSize.{v‚ÇÅ, max w u‚ÇÅ v‚ÇÅ v‚ÇÇ} L]
    [uliftYoneda.{max w v‚ÇÇ}.HasPointwiseLeftKanExtension
      (uliftYoneda.{max w v‚ÇÇ} ‚ãô (opOpEquivalence C).congrLeft.functor.comp L)] :
    L.IsLeftAdjoint :=
  ‚ü®_, ‚ü®((opOpEquivalence C).congrLeft.symm.toAdjunction.comp
    (uliftYonedaAdjunction _ (ùüô _))).ofNatIsoLeft
      ((opOpEquivalence C).congrLeft.invFunIdAssoc L)‚ü©‚ü©

section

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÅ} D] (F : C ‚•§ D)

instance (X : C) (Y : F.op.LeftExtension (yoneda.obj X)) :
    Unique (Functor.LeftExtension.mk _ (yonedaMap F X) ‚ü∂ Y) where
  default := StructuredArrow.homMk
      (yonedaEquiv.symm (yonedaEquiv (F := F.op.comp Y.right) Y.hom)) (by
        ext Z f
        simpa using congr_fun (Y.hom.naturality f.op).symm (ùüô _))
  uniq œÜ := by
    ext1
    apply yonedaEquiv.injective
    simp [‚Üê StructuredArrow.w œÜ, yonedaEquiv]

/-- Given `F : C ‚•§ D` and `X : C`, `yoneda.obj (F.obj X) : D·µí·µñ ‚•§ Type _` is the
left Kan extension of `yoneda.obj X : C·µí·µñ ‚•§ Type _` along `F.op`. -/
instance (X : C) : (yoneda.obj (F.obj X)).IsLeftKanExtension (yonedaMap F X) :=
  ‚ü®‚ü®Limits.IsInitial.ofUnique _‚ü©‚ü©

end

section

variable {D : Type u‚ÇÇ} [Category.{v‚ÇÇ} D] (F : C ‚•§ D)

instance (X : C) (Y : F.op.LeftExtension (uliftYoneda.{max w v‚ÇÇ}.obj X)) :
    Unique (Functor.LeftExtension.mk _ (uliftYonedaMap.{w} F X) ‚ü∂ Y) where
  default := StructuredArrow.homMk
    (uliftYonedaEquiv.symm (uliftYonedaEquiv (F := F.op ‚ãô Y.right) Y.hom)) (by
      ext Z ‚ü®f‚ü©
      dsimp
      rw [uliftYonedaMap_app_apply]
      simpa [uliftYonedaEquiv, uliftYoneda] using
        congr_fun (Y.hom.naturality f.op).symm (ULift.up (ùüô _)) )
  uniq œÜ := by
    ext : 1
    apply uliftYonedaEquiv.injective
    simp [‚Üê StructuredArrow.w œÜ, uliftYonedaEquiv, uliftYonedaMap]

/-- Given `F : C ‚•§ D` and `X : C`, `uliftYoneda.obj (F.obj X) : D·µí·µñ ‚•§ Type (max w v‚ÇÅ v‚ÇÇ)` is the
left Kan extension of `uliftYoneda.obj X : C·µí·µñ ‚•§ Type (max w v‚ÇÅ v‚ÇÇ)` along `F.op`. -/
instance (X : C) : (uliftYoneda.{max w v‚ÇÅ}.obj (F.obj X)).IsLeftKanExtension
    (uliftYonedaMap.{w} F X) :=
  ‚ü®‚ü®Limits.IsInitial.ofUnique _‚ü©‚ü©

section
variable [‚àÄ (P : C·µí·µñ ‚•§ Type max w v‚ÇÅ v‚ÇÇ), F.op.HasLeftKanExtension P]

/-- `F ‚ãô uliftYoneda` is naturally isomorphic to `uliftYoneda ‚ãô F.op.lan`. -/
noncomputable def compULiftYonedaIsoULiftYonedaCompLan :
    F ‚ãô uliftYoneda.{max w v‚ÇÅ} ‚âÖ uliftYoneda.{max w v‚ÇÇ} ‚ãô F.op.lan :=
  NatIso.ofComponents (fun X => Functor.leftKanExtensionUnique _
    (uliftYonedaMap.{w} F X) (F.op.lan.obj _) (F.op.lanUnit.app (uliftYoneda.obj X)))
    (fun {X Y} f => by
      apply uliftYonedaEquiv.injective
      have eq‚ÇÅ := congr_fun
        ((uliftYoneda.{max w v‚ÇÅ}.obj (F.obj Y)).descOfIsLeftKanExtension_fac_app
        (uliftYonedaMap F Y) (F.op.lan.obj (uliftYoneda.obj Y))
          (F.op.lanUnit.app (uliftYoneda.obj Y)) _) ‚ü®f‚ü©
      have eq‚ÇÇ := congr_fun
        (((uliftYoneda.{max w v‚ÇÅ}.obj (F.obj X)).descOfIsLeftKanExtension_fac_app
        (uliftYonedaMap F X) (F.op.lan.obj (uliftYoneda.obj X))
          (F.op.lanUnit.app (uliftYoneda.obj X))) _) ‚ü®ùüô _‚ü©
      have eq‚ÇÉ := congr_fun (congr_app (F.op.lanUnit.naturality
        (uliftYoneda.{max w v‚ÇÇ}.map f)) _) ‚ü®ùüô _‚ü©
      dsimp [uliftYoneda, uliftYonedaMap, uliftYonedaEquiv,
        Functor.leftKanExtensionUnique] at eq‚ÇÅ eq‚ÇÇ eq‚ÇÉ ‚ä¢
      simp only [Functor.map_id] at eq‚ÇÇ
      simp only [id_comp] at eq‚ÇÉ
      simp [eq‚ÇÅ, eq‚ÇÇ, eq‚ÇÉ])

@[simp]
lemma compULiftYonedaIsoULiftYonedaCompLan_inv_app_app_apply_eq_id (X : C) :
    ((compULiftYonedaIsoULiftYonedaCompLan.{w} F).inv.app X).app (op (F.obj X))
          ((F.op.lanUnit.app ((uliftYoneda.{max w v‚ÇÇ}).obj X)).app (op X)
        (ULift.up (ùüô X))) = ULift.up (ùüô (F.obj X)) :=
  (congr_fun (Functor.descOfIsLeftKanExtension_fac_app _
    (F.op.lanUnit.app ((uliftYoneda.{max w v‚ÇÇ}).obj X)) _
    (uliftYonedaMap.{w} F X) (op X)) (ULift.up (ùüô X))).trans (by simp [uliftYonedaMap])

end
#exit

namespace compYonedaIsoYonedaCompLan

variable {F}

section

variable {X : C} {G : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ D·µí·µñ ‚•§ Type v‚ÇÅ} (œÜ : F ‚ãô yoneda ‚ü∂ yoneda ‚ãô G)

/-- Auxiliary definition for `presheafHom`. -/
def coconeApp {P : C·µí·µñ ‚•§ Type v‚ÇÅ} (x : P.Elements) :
    yoneda.obj x.1.unop ‚ü∂ F.op ‚ãô G.obj P := yonedaEquiv.symm
      ((G.map (yonedaEquiv.symm x.2)).app _ ((œÜ.app x.1.unop).app _ (ùüô _)))

@[reassoc (attr := simp)]
lemma coconeApp_naturality {P : C·µí·µñ ‚•§ Type v‚ÇÅ} {x y : P.Elements} (f : x ‚ü∂ y) :
    yoneda.map f.1.unop ‚â´ coconeApp œÜ x = coconeApp œÜ y := by
  have eq‚ÇÅ : yoneda.map f.1.unop ‚â´ yonedaEquiv.symm x.2 = yonedaEquiv.symm y.2 :=
    yonedaEquiv.injective
      (by simpa only [Equiv.apply_symm_apply, ‚Üê yonedaEquiv_naturality] using f.2)
  have eq‚ÇÇ := congr_fun ((G.map (yonedaEquiv.symm x.2)).naturality (F.map f.1.unop).op)
    ((œÜ.app x.1.unop).app _ (ùüô _))
  have eq‚ÇÉ := congr_fun (congr_app (œÜ.naturality f.1.unop) _) (ùüô _)
  have eq‚ÇÑ := congr_fun ((œÜ.app x.1.unop).naturality (F.map f.1.unop).op)
  dsimp at eq‚ÇÇ eq‚ÇÉ eq‚ÇÑ
  apply yonedaEquiv.injective
  dsimp only [coconeApp]
  rw [Equiv.apply_symm_apply, ‚Üê yonedaEquiv_naturality, Equiv.apply_symm_apply]
  simp [‚Üê eq‚ÇÅ, ‚Üê eq‚ÇÇ, ‚Üê eq‚ÇÉ, ‚Üê eq‚ÇÑ, Functor.map_comp, FunctorToTypes.comp, id_comp, comp_id]

/-- Given functors `F : C ‚•§ D` and `G : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ (D·µí·µñ ‚•§ Type v‚ÇÅ)`, and
a natural transformation `œÜ : F ‚ãô yoneda ‚ü∂ yoneda ‚ãô G`, this is the
(natural) morphism `P ‚ü∂ F.op ‚ãô G.obj P` for all `P : C·µí·µñ ‚•§ Type v‚ÇÅ` that is
determined by `œÜ`. -/
noncomputable def presheafHom (P : C·µí·µñ ‚•§ Type v‚ÇÅ) : P ‚ü∂ F.op ‚ãô G.obj P :=
  (colimitOfRepresentable P).desc
    (Cocone.mk _ { app := fun x => coconeApp œÜ x.unop })

lemma yonedaEquiv_Œπ_presheafHom (P : C·µí·µñ ‚•§ Type v‚ÇÅ) {X : C} (f : yoneda.obj X ‚ü∂ P) :
    yonedaEquiv (f ‚â´ presheafHom œÜ P) =
      (G.map f).app (Opposite.op (F.obj X)) ((œÜ.app X).app _ (ùüô _)) := by
  obtain ‚ü®x, rfl‚ü© := yonedaEquiv.symm.surjective f
  erw [(colimitOfRepresentable P).fac _ (Opposite.op (P.elementsMk _ x))]
  dsimp only [coconeApp]
  apply Equiv.apply_symm_apply

lemma yonedaEquiv_presheafHom_yoneda_obj (X : C) :
    yonedaEquiv (presheafHom œÜ (yoneda.obj X)) =
      ((œÜ.app X).app (F.op.obj (Opposite.op X)) (ùüô _)) := by
  simpa using yonedaEquiv_Œπ_presheafHom œÜ (yoneda.obj X) (ùüô _)

@[reassoc (attr := simp)]
lemma presheafHom_naturality {P Q : C·µí·µñ ‚•§ Type v‚ÇÅ} (f : P ‚ü∂ Q) :
    presheafHom œÜ P ‚â´ whiskerLeft F.op (G.map f) = f ‚â´ presheafHom œÜ Q :=
  hom_ext_yoneda (fun X p => yonedaEquiv.injective (by
    rw [‚Üê assoc p f, yonedaEquiv_Œπ_presheafHom, ‚Üê assoc,
      yonedaEquiv_comp, yonedaEquiv_Œπ_presheafHom,
      whiskerLeft_app, Functor.map_comp, FunctorToTypes.comp]
    dsimp))

variable [‚àÄ (P : C·µí·µñ ‚•§ Type v‚ÇÅ), F.op.HasLeftKanExtension P]

/-- Given functors `F : C ‚•§ D` and `G : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ (D·µí·µñ ‚•§ Type v‚ÇÅ)`,
and a natural transformation `œÜ : F ‚ãô yoneda ‚ü∂ yoneda ‚ãô G`, this is
the canonical natural transformation `F.op.lan ‚ü∂ G`, which is part of the
that `F.op.lan : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ D·µí·µñ ‚•§ Type v‚ÇÅ` is the left Kan extension
of `F ‚ãô yoneda : C ‚•§ D·µí·µñ ‚•§ Type v‚ÇÅ` along `yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ`. -/
noncomputable def natTrans : F.op.lan ‚ü∂ G where
  app P := (F.op.lan.obj P).descOfIsLeftKanExtension (F.op.lanUnit.app P) _ (presheafHom œÜ P)
  naturality {P Q} f := by
    apply (F.op.lan.obj P).hom_ext_of_isLeftKanExtension (F.op.lanUnit.app P)
    have eq := F.op.lanUnit.naturality f
    dsimp at eq ‚ä¢
    rw [Functor.descOfIsLeftKanExtension_fac_assoc, ‚Üê reassoc_of% eq,
      Functor.descOfIsLeftKanExtension_fac, presheafHom_naturality]

lemma natTrans_app_yoneda_obj (X : C) : (natTrans œÜ).app (yoneda.obj X) =
    (compYonedaIsoYonedaCompLan F).inv.app X ‚â´ œÜ.app X := by
  dsimp [natTrans]
  apply (F.op.lan.obj (yoneda.obj X)).hom_ext_of_isLeftKanExtension (F.op.lanUnit.app _)
  rw [Functor.descOfIsLeftKanExtension_fac]
  apply yonedaEquiv.injective
  rw [yonedaEquiv_presheafHom_yoneda_obj]
  exact congr_arg _ (compYonedaIsoYonedaCompLan_inv_app_app_apply_eq_id F X).symm

end

variable [‚àÄ (P : C·µí·µñ ‚•§ Type v‚ÇÅ), F.op.HasLeftKanExtension P]

/-- Given a functor `F : C ‚•§ D`, this definition is part of the verification that
`Functor.LeftExtension.mk F.op.lan (compYonedaIsoYonedaCompLan F).hom`
is universal, i.e. that  `F.op.lan : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ D·µí·µñ ‚•§ Type v‚ÇÅ` is the
left Kan extension of `F ‚ãô yoneda : C ‚•§ D·µí·µñ ‚•§ Type v‚ÇÅ`
along `yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ`. -/
noncomputable def extensionHom (Œ¶ : yoneda.LeftExtension (F ‚ãô yoneda)) :
    Functor.LeftExtension.mk F.op.lan (compYonedaIsoYonedaCompLan F).hom ‚ü∂ Œ¶ :=
  StructuredArrow.homMk (natTrans Œ¶.hom) (by
    ext X : 2
    dsimp
    rw [natTrans_app_yoneda_obj, Iso.hom_inv_id_app_assoc])

@[ext]
lemma hom_ext {Œ¶ : yoneda.LeftExtension (F ‚ãô yoneda)}
    (f g : Functor.LeftExtension.mk F.op.lan (compYonedaIsoYonedaCompLan F).hom ‚ü∂ Œ¶) :
    f = g := by
  ext P : 3
  apply (F.op.lan.obj P).hom_ext_of_isLeftKanExtension (F.op.lanUnit.app P)
  apply (colimitOfRepresentable P).hom_ext
  intro x
  have eq := F.op.lanUnit.naturality (yonedaEquiv.symm x.unop.2)
  have eq‚ÇÅ := congr_fun (congr_app (congr_app (StructuredArrow.w f) x.unop.1.unop)
    (F.op.obj x.unop.1)) (ùüô _)
  have eq‚ÇÇ := congr_fun (congr_app (congr_app (StructuredArrow.w g) x.unop.1.unop)
    (F.op.obj x.unop.1)) (ùüô _)
  dsimp at eq‚ÇÅ eq‚ÇÇ eq ‚ä¢
  simp only [reassoc_of% eq, ‚Üê whiskerLeft_comp]
  congr 2
  simp only [‚Üê cancel_epi ((compYonedaIsoYonedaCompLan F).hom.app x.unop.1.unop),
    NatTrans.naturality]
  apply yonedaEquiv.injective
  dsimp [yonedaEquiv_apply]
  rw [eq‚ÇÅ, eq‚ÇÇ]

end compYonedaIsoYonedaCompLan

variable [‚àÄ (P : C·µí·µñ ‚•§ Type v‚ÇÅ), F.op.HasLeftKanExtension P]

noncomputable instance (Œ¶ : StructuredArrow (F ‚ãô yoneda)
    ((whiskeringLeft C (C·µí·µñ ‚•§ Type v‚ÇÅ) (D·µí·µñ ‚•§ Type v‚ÇÅ)).obj yoneda)) :
    Unique (Functor.LeftExtension.mk F.op.lan (compYonedaIsoYonedaCompLan F).hom ‚ü∂ Œ¶) where
  default := compYonedaIsoYonedaCompLan.extensionHom Œ¶
  uniq _ := compYonedaIsoYonedaCompLan.hom_ext _ _

/-- Given a functor `F : C ‚•§ D`, `F.op.lan : (C·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ D·µí·µñ ‚•§ Type v‚ÇÅ` is the
left Kan extension of `F ‚ãô yoneda : C ‚•§ D·µí·µñ ‚•§ Type v‚ÇÅ` along `yoneda : C ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ`. -/
instance : F.op.lan.IsLeftKanExtension (compYonedaIsoYonedaCompLan F).hom :=
  ‚ü®‚ü®Limits.IsInitial.ofUnique _‚ü©‚ü©

end

section

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (P : C·µí·µñ ‚•§ Type v‚ÇÅ)

/-- For a presheaf `P`, consider the forgetful functor from the category of representable
    presheaves over `P` to the category of presheaves. There is a tautological cocone over this
    functor whose leg for a natural transformation `V ‚ü∂ P` with `V` representable is just that
    natural transformation. -/
@[simps]
def tautologicalCocone : Cocone (CostructuredArrow.proj yoneda P ‚ãô yoneda) where
  pt := P
  Œπ := { app := fun X => X.hom }

/-- The tautological cocone with point `P` is a colimit cocone, exhibiting `P` as a colimit of
    representables.

    Proposition 2.6.3(i) in [Kashiwara2006] -/
def isColimitTautologicalCocone : IsColimit (tautologicalCocone P) where
  desc := fun s => by
    refine ‚ü®fun X t => yonedaEquiv (s.Œπ.app (CostructuredArrow.mk (yonedaEquiv.symm t))), ?_‚ü©
    intros X Y f
    ext t
    dsimp
    rw [yonedaEquiv_naturality', yonedaEquiv_symm_map]
    simpa using (s.Œπ.naturality
      (CostructuredArrow.homMk' (CostructuredArrow.mk (yonedaEquiv.symm t)) f.unop)).symm
  fac := by
    intro s t
    dsimp
    apply yonedaEquiv.injective
    rw [yonedaEquiv_comp]
    dsimp only
    rw [Equiv.symm_apply_apply]
    rfl
  uniq := by
    intro s j h
    ext V x
    obtain ‚ü®t, rfl‚ü© := yonedaEquiv.surjective x
    dsimp
    rw [Equiv.symm_apply_apply, ‚Üê yonedaEquiv_comp]
    exact congr_arg _ (h (CostructuredArrow.mk t))

variable {I : Type v‚ÇÅ} [SmallCategory I] (F : I ‚•§ C)

/-- Given a functor `F : I ‚•§ C`, a cocone `c` on `F ‚ãô yoneda : I ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ` induces a
    functor `I ‚•§ CostructuredArrow yoneda c.pt` which maps `i : I` to the leg
    `yoneda.obj (F.obj i) ‚ü∂ c.pt`. If `c` is a colimit cocone, then that functor is
    final.

    Proposition 2.6.3(ii) in [Kashiwara2006] -/
theorem final_toCostructuredArrow_comp_pre {c : Cocone (F ‚ãô yoneda)} (hc : IsColimit c) :
    Functor.Final (c.toCostructuredArrow ‚ãô CostructuredArrow.pre F yoneda c.pt) := by
  apply Functor.final_of_isTerminal_colimit_comp_yoneda

  suffices IsTerminal (colimit ((c.toCostructuredArrow ‚ãô CostructuredArrow.pre F yoneda c.pt) ‚ãô
      CostructuredArrow.toOver yoneda c.pt)) by
    apply IsTerminal.isTerminalOfObj (overEquivPresheafCostructuredArrow c.pt).inverse
    apply IsTerminal.ofIso this
    refine ?_ ‚â™‚â´ (preservesColimitIso (overEquivPresheafCostructuredArrow c.pt).inverse _).symm
    apply HasColimit.isoOfNatIso
    exact isoWhiskerLeft _
      (CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow c.pt).isoCompInverse

  apply IsTerminal.ofIso Over.mkIdTerminal
  let isc : IsColimit ((Over.forget _).mapCocone _) := isColimitOfPreserves _
    (colimit.isColimit ((c.toCostructuredArrow ‚ãô CostructuredArrow.pre F yoneda c.pt) ‚ãô
      CostructuredArrow.toOver yoneda c.pt))
  exact Over.isoMk (hc.coconePointUniqueUpToIso isc) (hc.hom_ext fun i => by simp)

end-/

end Presheaf

end CategoryTheory
