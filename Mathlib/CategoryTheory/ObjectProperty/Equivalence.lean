/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.ObjectProperty.CompleteLattice
import Mathlib.CategoryTheory.ObjectProperty.FullSubcategory
import Mathlib.CategoryTheory.Equivalence

/-!
# Equivalence of full subcategories

The inclusion functor `P.FullSubcategory ‚•§ Q.FullSubcategory` induced
by an inequality `P ‚â§ Q` in `ObjectProperty C` is an equivalence iff
`Q ‚â§ P.isoClosure`.

-/

universe v v' u u'

namespace CategoryTheory.ObjectProperty

variable {C : Type u} [Category.{v} C] {P Q : ObjectProperty C} (h : P ‚â§ Q)

lemma essSurj_ŒπOfLE_iff : (ŒπOfLE h).EssSurj ‚Üî Q ‚â§ P.isoClosure := by
  refine ‚ü®fun _ X hX ‚Ü¶ ?_, fun hPQ ‚Ü¶ ‚ü®fun ‚ü®Y, hY‚ü© ‚Ü¶ ?_‚ü©‚ü©
  ¬∑ exact ‚ü®_, ((ŒπOfLE h).objPreimage ‚ü®X, hX‚ü©).2,
      ‚ü®Q.Œπ.mapIso ((ŒπOfLE h).objObjPreimageIso ‚ü®X, hX‚ü©).symm‚ü©‚ü©
  ¬∑ obtain ‚ü®X, hX, ‚ü®e‚ü©‚ü© := hPQ _ hY
    exact ‚ü®‚ü®X, hX‚ü©, ‚ü®Q.Œπ.preimageIso e.symm‚ü©‚ü©

lemma isEquivalence_ŒπOfLE_iff : (ŒπOfLE h).IsEquivalence ‚Üî Q ‚â§ P.isoClosure := by
  rw [‚Üê essSurj_ŒπOfLE_iff h]
  exact ‚ü®fun _ ‚Ü¶ inferInstance, fun _ ‚Ü¶ { }‚ü©

instance : (ŒπOfLE P.le_isoClosure).IsEquivalence := by rw [isEquivalence_ŒπOfLE_iff]

variable (C) in
/-- The equivalence between the fullsubcategory `‚ä§` of a category `C` and `C` itself. -/
@[simps]
def topEquivalence : ObjectProperty.FullSubcategory (C := C) ‚ä§ ‚âå C where
  functor := ObjectProperty.Œπ _
  inverse := ObjectProperty.lift _ (ùü≠ _) (by simp)
  unitIso := Iso.refl _
  counitIso := Iso.refl _

end CategoryTheory.ObjectProperty

namespace CategoryTheory.Equivalence

variable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]
  {P : ObjectProperty C} {Q : ObjectProperty D} (e : C ‚âå D)

/-- The equivalence of categories between two fullsubcategories `P` and `Q`
of categories `C` and `D` that is induced by an equivalence `e : C ‚âå D`
when `Q.inverseImage e.functor = P` and `Q` respects isomorphisms. -/
@[simps]
def congrFullSubcategory [Q.IsClosedUnderIsomorphisms] (h : Q.inverseImage e.functor = P) :
    P.FullSubcategory ‚âå Q.FullSubcategory where
  functor := Q.lift (P.Œπ ‚ãô e.functor) (fun ‚ü®X, hX‚ü© ‚Ü¶ by rwa [‚Üê h] at hX)
  inverse := P.lift (Q.Œπ ‚ãô e.inverse) (fun ‚ü®Y, hY‚ü© ‚Ü¶ by
    rw [‚Üê h]
    exact Q.prop_of_iso (e.counitIso.app Y).symm hY)
  unitIso := (P.fullyFaithfulŒπ.whiskeringRight _).preimageIso
    (P.Œπ.isoWhiskerLeft e.unitIso)
  counitIso := (Q.fullyFaithfulŒπ.whiskeringRight _).preimageIso
    (Q.Œπ.isoWhiskerLeft e.counitIso)
  functor_unitIso_comp X := e.functor_unit_comp X.obj

end CategoryTheory.Equivalence
