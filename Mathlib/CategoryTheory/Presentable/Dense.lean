/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Presentable.LocallyPresentable
import Mathlib.CategoryTheory.Functor.KanExtension.Dense
import Mathlib.CategoryTheory.Filtered.Final

/-!
# `Œ∫`-presentable objects form a dense subcategory

In a `Œ∫`-accessible category `C`, `isCardinalPresentable C Œ∫` is
a dense subcategory.

-/

universe w v u

namespace CategoryTheory

open Limits Opposite

variable {C : Type u} [Category.{v} C]

-- to be moved
@[simps]
def ObjectProperty.ColimitOfShape.toCostructuredArrow
    {P : ObjectProperty C} {J : Type*} [Category J]
    {X : C} (p : P.ColimitOfShape J X) :
    J ‚•§ CostructuredArrow P.Œπ X where
  obj j := CostructuredArrow.mk (Y := ‚ü®_, p.prop_diag_obj j‚ü©) (by exact p.Œπ.app j)
  map f := CostructuredArrow.homMk (by exact p.diag.map f)

variable {Œ∫ : Cardinal.{w}} [Fact Œ∫.IsRegular]

-- to be moved
instance (X : (isCardinalPresentable C Œ∫).FullSubcategory) : IsCardinalPresentable X.obj Œ∫ :=
  X.property

instance (X) : IsCardinalPresentable ((isCardinalPresentable C Œ∫).Œπ.obj X) Œ∫ := by
  dsimp
  infer_instance

namespace IsCardinalAccessibleCategory

section

variable {J : Type w} [SmallCategory J] [IsCardinalFiltered J Œ∫] {X : C}
  (p : (isCardinalPresentable C Œ∫).ColimitOfShape J X)

lemma final_toCostructuredArrow : p.toCostructuredArrow.Final := by
  have : EssentiallySmall.{w} J := essentiallySmallSelf _ -- FIXME
  have := isFiltered_of_isCardinalFiltered J Œ∫
  rw [Functor.final_iff_of_isFiltered]
  refine ‚ü®fun f ‚Ü¶ ?_, fun {f j} g‚ÇÅ g‚ÇÇ ‚Ü¶ ?_‚ü©
  ¬∑ obtain ‚ü®j, g, hg‚ü© := IsCardinalPresentable.exists_hom_of_isColimit Œ∫ p.isColimit f.hom
    exact ‚ü®j, ‚ü®CostructuredArrow.homMk g‚ü©‚ü©
  ¬∑ obtain ‚ü®k, a, h‚ü© := IsCardinalPresentable.exists_eq_of_isColimit' Œ∫ p.isColimit g‚ÇÅ.left g‚ÇÇ.left
      ((CostructuredArrow.w g‚ÇÅ).trans (CostructuredArrow.w g‚ÇÇ).symm)
    exact ‚ü®k, a, by aesop‚ü©

end

variable [IsCardinalAccessibleCategory C Œ∫]

instance : (isCardinalPresentable C Œ∫).Œπ.IsDense where
  isDenseAt X := by
    let E := (Functor.LeftExtension.mk (ùü≠ _)
      (isCardinalPresentable C Œ∫).Œπ.rightUnitor.inv)
    have := E.coconeAt X
    -- use `final_toCostructuredArrow`
    sorry

end IsCardinalAccessibleCategory

end CategoryTheory
