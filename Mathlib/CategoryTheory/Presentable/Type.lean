/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Presentable.Basic
import Mathlib.CategoryTheory.Limits.Types.Filtered
import Mathlib.CategoryTheory.Types.Set

/-!
# Presentable objects in Type

In this file, we show that if `Œ∫ : Cardinal.{u}` is a regular cardinal,
then `X : Type u` is `Œ∫`-presentable in the category of types iff
`HasCardinalLT X Œ∫` holds.

-/

universe u

open CategoryTheory Limits Opposite

namespace HasCardinalLT

variable {X : Type u} (Œ∫ : Cardinal.{u}) [Fact Œ∫.IsRegular]

lemma isCardinalPresentable (hX : HasCardinalLT X Œ∫) :
    IsCardinalPresentable X Œ∫ where
  preservesColimitOfShape J _ _ :=
    ‚ü®fun {F} ‚Ü¶ ‚ü®fun {c} hc ‚Ü¶ ‚ü®by
      have := isFiltered_of_isCardinalFiltered J Œ∫
      refine Types.FilteredColimit.isColimitOf' _ _ (fun f ‚Ü¶ ?_) (fun j f g h ‚Ü¶ ?_)
      ¬∑ choose j g hg using fun x ‚Ü¶ Types.jointly_surjective_of_isColimit hc (f x)
        refine ‚ü®IsCardinalFiltered.max j hX,
          fun x ‚Ü¶ F.map (IsCardinalFiltered.toMax j hX x) (g x), ?_‚ü©
        dsimp
        ext x
        dsimp at j g hg x ‚ä¢
        rw [‚Üê hg]
        exact congr_fun (c.w (IsCardinalFiltered.toMax j hX x)).symm (g x)
      ¬∑ choose k a hk using fun x ‚Ü¶
          (Types.FilteredColimit.isColimit_eq_iff' hc _ _).1 (congr_fun h x)
        dsimp at f g h k a hk ‚ä¢
        obtain ‚ü®l, b, c, hl‚ü© : ‚àÉ (l : J) (c : j ‚ü∂ l) (b : ‚àÄ x, k x ‚ü∂ l),
            ‚àÄ x, a x ‚â´ b x = c := by
          let œÜ (x : X) : j ‚ü∂ IsCardinalFiltered.max k hX :=
            a x ‚â´ IsCardinalFiltered.toMax k hX x
          exact ‚ü®IsCardinalFiltered.coeq œÜ hX,
            IsCardinalFiltered.toCoeq œÜ hX,
            fun x ‚Ü¶ IsCardinalFiltered.toMax k hX x ‚â´ IsCardinalFiltered.coeqHom œÜ hX,
            fun x ‚Ü¶ by simpa [œÜ] using IsCardinalFiltered.coeq_condition œÜ hX x‚ü©
        exact ‚ü®l, b, by ext x; simp [‚Üê hl x, hk]‚ü©‚ü©‚ü©‚ü©

variable (X)

protected abbrev Set := { A : Set X // HasCardinalLT A Œ∫ }

instance : IsCardinalFiltered (HasCardinalLT.Set X Œ∫) Œ∫ :=
  isCardinalFiltered_preorder _ _ (by
    sorry)

@[simps!]
def Set.functor : HasCardinalLT.Set X Œ∫ ‚•§ Type u :=
  Monotone.functor (f := Subtype.val) (by tauto) ‚ãô Set.functorToTypes (X := X)

@[simps]
def Set.cocone : Cocone (Set.functor X Œ∫) where
  pt := X
  Œπ.app _ := Subtype.val

def Set.isColimitCocone : IsColimit (cocone X Œ∫) := sorry

end HasCardinalLT

namespace CategoryTheory

namespace Types

variable {X : Type u} (Œ∫ : Cardinal.{u}) [Fact Œ∫.IsRegular]


lemma isCardinalPresentable_iff :
    IsCardinalPresentable X Œ∫ ‚Üî HasCardinalLT X Œ∫ := by
  refine ‚ü®fun _ ‚Ü¶ ?_, fun hX ‚Ü¶ hX.isCardinalPresentable‚ü©
  have := preservesColimitsOfShape_of_isCardinalPresentable X Œ∫
  obtain ‚ü®‚ü®A, hA‚ü©, f, hf‚ü© := Types.jointly_surjective_of_isColimit
    (isColimitOfPreserves (coyoneda.obj (op X))
      (HasCardinalLT.Set.isColimitCocone X Œ∫)) (ùüô X)
  obtain rfl : A = .univ := by
    ext x
    have := congr_fun hf x
    dsimp at f hf this
    simp only [Set.mem_univ, iff_true]
    rw [‚Üê this]
    exact (f x).2
  exact (hasCardinalLT_iff_of_equiv (Equiv.Set.univ X) _).1 hA

instance (X : Type u) : IsPresentable.{u} X := by
  obtain ‚ü®Œ∫, hŒ∫, hX‚ü© := HasCardinalLT.exists_regular_cardinal.{u} X
  have : Fact Œ∫.IsRegular := ‚ü®hŒ∫‚ü©
  have := hX.isCardinalPresentable
  exact isPresentable_of_isCardinalPresentable X Œ∫

end Types

end CategoryTheory
