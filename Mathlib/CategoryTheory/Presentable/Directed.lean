/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Presentable.IsCardinalFiltered
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.MorphismProperty.Basic

/-!
# `Œ∫`-filtered categories and `Œ∫`-directed poset

-/

universe w

lemma hasCardinalLT_of_finite
    (X : Type*) [Finite X] (Œ∫ : Cardinal) (hŒ∫ : Cardinal.aleph0 ‚â§ Œ∫) :
    HasCardinalLT X Œ∫ :=
  .of_le (by rwa [hasCardinalLT_aleph0_iff]) hŒ∫

lemma hasCardinalLT_punit (Œ∫ : Cardinal) (hŒ∫ : Cardinal.aleph0 ‚â§ Œ∫) :
    HasCardinalLT PUnit Œ∫ :=
  hasCardinalLT_of_finite _ _ hŒ∫

namespace CategoryTheory

namespace IsCardinalFiltered

variable (J : Type w) [SmallCategory J] (Œ∫ : Cardinal.{w})

namespace ExistsDirected

@[ext]
structure PreDiagram where
  W : MorphismProperty J
  P : ObjectProperty J
  src {i j : J} {f : i ‚ü∂ j} : W f ‚Üí P i
  tgt {i j : J} {f : i ‚ü∂ j} : W f ‚Üí P j
  hW : HasCardinalLT W.toSet Œ∫
  hP : HasCardinalLT (Subtype P) Œ∫

namespace PreDiagram

variable {J Œ∫}

structure Terminal (D : PreDiagram J Œ∫) (e : J) where
  prop_id : D.W (ùüô e)
  lift {j : J} (hj : D.P j) : j ‚ü∂ e
  hlift {j : J} (hj : D.P j) : D.W (lift hj)
  uniq {j : J} (hj : D.P j) {œÜ : j ‚ü∂ e} (hœÜ : D.W œÜ) : lift hj = œÜ
  comm {i j : J} (f : i ‚ü∂ j) (hf : D.W f) : f ‚â´ lift (D.tgt hf) = lift (D.src hf)

namespace Terminal

attribute [reassoc] Terminal.comm

variable {D : PreDiagram J Œ∫} {e : J}

lemma prop (h : D.Terminal e) : D.P e := D.src (h.prop_id)

@[simp]
lemma lift_self (h : D.Terminal e) : h.lift h.prop = ùüô e := h.uniq _ h.prop_id

instance : Subsingleton (D.Terminal e) where
  allEq h‚ÇÅ h‚ÇÇ := by
    have : @h‚ÇÅ.lift = @h‚ÇÇ.lift := by
      ext j hj
      exact h‚ÇÅ.uniq hj (h‚ÇÇ.hlift hj)
    cases h‚ÇÅ
    cases h‚ÇÇ
    aesop

noncomputable def ofExistsUnique (prop_id : D.W (ùüô e))
    (h‚ÇÅ : ‚àÄ ‚¶Éj : J‚¶Ñ (_ : D.P j), ‚àÉ (lift : j ‚ü∂ e), D.W lift)
    (h‚ÇÇ : ‚àÄ ‚¶Éj : J‚¶Ñ (_ : D.P j) (l‚ÇÅ l‚ÇÇ : j ‚ü∂ e), D.W l‚ÇÅ ‚Üí D.W l‚ÇÇ ‚Üí l‚ÇÅ = l‚ÇÇ)
    (h‚ÇÉ : ‚àÄ ‚¶Éi j : J‚¶Ñ (f : i ‚ü∂ j) (_ : D.W f), ‚àÉ (li : i ‚ü∂ e) (lj : j ‚ü∂ e),
      D.W li ‚àß D.W lj ‚àß f ‚â´ lj = li) :
    D.Terminal e where
  prop_id := prop_id
  lift hj := (h‚ÇÅ hj).choose
  hlift hj := (h‚ÇÅ hj).choose_spec
  uniq hj œÜ hœÜ := h‚ÇÇ hj (h‚ÇÅ hj).choose œÜ (h‚ÇÅ hj).choose_spec hœÜ
  comm _ hf := by
    obtain ‚ü®li, lj, hli, hlj, fac‚ü© := h‚ÇÉ _ hf
    rw [h‚ÇÇ (D.src hf) _ li (h‚ÇÅ (D.src hf)).choose_spec hli,
      h‚ÇÇ (D.tgt hf) _ lj (h‚ÇÅ (D.tgt hf)).choose_spec hlj, fac]

end Terminal

end PreDiagram

structure Diagram extends PreDiagram J Œ∫ where
  e : J
  terminal : toPreDiagram.Terminal e
  uniq_terminal (j : J) (hj : toPreDiagram.Terminal j) : j = e

@[ext]
lemma Diagram.ext {D‚ÇÅ D‚ÇÇ : Diagram J Œ∫} (hW : D‚ÇÅ.W = D‚ÇÇ.W) (hP : D‚ÇÅ.P = D‚ÇÇ.P) : D‚ÇÅ = D‚ÇÇ := by
  obtain ‚ü®D‚ÇÅ, e, h‚ÇÅ, h‚ÇÅ'‚ü© := D‚ÇÅ
  obtain ‚ü®D‚ÇÇ, e', h‚ÇÇ, h‚ÇÇ'‚ü© := D‚ÇÇ
  obtain rfl : D‚ÇÅ = D‚ÇÇ := by aesop
  obtain rfl : e = e' := h‚ÇÇ' _ h‚ÇÅ
  obtain rfl : h‚ÇÅ = h‚ÇÇ := by subsingleton
  rfl

instance : PartialOrder (Diagram J Œ∫) where
  le D‚ÇÅ D‚ÇÇ := D‚ÇÅ.W ‚â§ D‚ÇÇ.W ‚àß D‚ÇÅ.P ‚â§ D‚ÇÇ.P
  le_refl _ := ‚ü®by rfl, by rfl‚ü©
  le_trans _ _ _ h‚ÇÅ h‚ÇÇ := ‚ü®h‚ÇÅ.1.trans h‚ÇÇ.1, h‚ÇÅ.2.trans h‚ÇÇ.2‚ü©
  le_antisymm _ _ h‚ÇÅ h‚ÇÇ := by
    ext : 1
    ¬∑ exact le_antisymm h‚ÇÅ.1 h‚ÇÇ.1
    ¬∑ exact le_antisymm h‚ÇÅ.2 h‚ÇÇ.2

section

variable {J Œ∫}

def functorMap {D‚ÇÅ D‚ÇÇ : Diagram J Œ∫} (h : D‚ÇÅ ‚â§ D‚ÇÇ) : D‚ÇÅ.e ‚ü∂ D‚ÇÇ.e :=
  D‚ÇÇ.terminal.lift (h.2 _ D‚ÇÅ.terminal.prop)

@[simp]
lemma functorMap_id (D : Diagram J Œ∫) : functorMap (le_refl D) = ùüô D.e := by
  simp [functorMap]

@[reassoc (attr := simp)]
lemma functorMap_comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ : Diagram J Œ∫} (h‚ÇÅ‚ÇÇ : D‚ÇÅ ‚â§ D‚ÇÇ) (h‚ÇÇ‚ÇÉ : D‚ÇÇ ‚â§ D‚ÇÉ) :
    functorMap h‚ÇÅ‚ÇÇ ‚â´ functorMap h‚ÇÇ‚ÇÉ = functorMap (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ) :=
  D‚ÇÉ.terminal.comm _ (h‚ÇÇ‚ÇÉ.1 _ (D‚ÇÇ.terminal.hlift _))

end

@[simps]
def functor : Diagram J Œ∫ ‚•§ J where
  obj D := D.e
  map h := functorMap (leOfHom h)

variable [Fact Œ∫.IsRegular]

variable {J Œ∫} in
@[simps]
def PreDiagram.single (j : J) : PreDiagram J Œ∫ where
  W := .ofHoms (fun (_ : Unit) ‚Ü¶ ùüô j)
  P := .ofObj (fun (_ : Unit) ‚Ü¶ j)
  src := by rintro _ _ _ ‚ü®‚ü©; exact ‚ü®‚ü®‚ü©‚ü©
  tgt := by rintro _ _ _ ‚ü®‚ü©; exact ‚ü®‚ü®‚ü©‚ü©
  hW :=
    (hasCardinalLT_punit Œ∫ (Cardinal.IsRegular.aleph0_le Fact.out)).of_surjective
        (f := fun (_ : Unit) ‚Ü¶ ‚ü®Arrow.mk (ùüô j), ‚ü®‚ü®‚ü©‚ü©‚ü©) (by
      rintro ‚ü®f, hf‚ü©
      refine ‚ü®‚ü®‚ü©, ?_‚ü©
      ext
      exact ((MorphismProperty.ofHoms_iff _ _).1
        ((MorphismProperty.arrow_mk_mem_toSet_iff _ _).1 hf)).choose_spec.symm)
  hP :=
    (hasCardinalLT_punit Œ∫ (Cardinal.IsRegular.aleph0_le Fact.out)).of_surjective
      (f := fun (_ : Unit) ‚Ü¶ ‚ü®j, by simp‚ü©) (fun ‚ü®k, hk‚ü© ‚Ü¶ ‚ü®‚ü®‚ü©, by aesop‚ü©)

variable {J Œ∫} in
def Diagram.single (j : J) : Diagram J Œ∫ where
  toPreDiagram := .single j
  e := j
  terminal :=
    { prop_id := ‚ü®‚ü®‚ü©‚ü©
      lift := by rintro j hj; simp at hj; subst hj; exact ùüô _
      hlift := by rintro j hj; simp at hj; subst hj; exact ‚ü®‚ü®‚ü©‚ü©
      uniq := by rintro j hj œÜ hœÜ; simp at hj; subst hj; obtain ‚ü®‚ü®‚ü©‚ü© := hœÜ; simp
      comm := by rintro _ _ f hf; obtain ‚ü®‚ü®‚ü©‚ü© := hf; simp }
  uniq_terminal := by rintro _ ‚ü®‚ü®‚ü©‚ü©; rfl

variable {J Œ∫} in
@[simps]
def PreDiagram.iSup {Œπ : Type*} (D : Œπ ‚Üí PreDiagram J Œ∫) (hŒπ : HasCardinalLT Œπ Œ∫) :
    PreDiagram J Œ∫ where
  W := ‚®Ü (i : Œπ), (D i).W
  P := ‚®Ü (i : Œπ), (D i).P
  src hf := by
    simp at hf ‚ä¢
    obtain ‚ü®i, hi‚ü© := hf
    exact ‚ü®i, (D i).src hi‚ü©
  tgt hf := by
    simp at hf ‚ä¢
    obtain ‚ü®i, hi‚ü© := hf
    exact ‚ü®i, (D i).tgt hi‚ü©
  hW := by
    sorry
  hP := by
    rw [hasCardinalLT_iff_cardinal_mk_lt]
    sorry

variable {J Œ∫} in
@[simps]
def PreDiagram.max (D‚ÇÅ D‚ÇÇ : PreDiagram J Œ∫) :
    PreDiagram J Œ∫ where
  W := D‚ÇÅ.W ‚äî D‚ÇÇ.W
  P := D‚ÇÅ.P ‚äî D‚ÇÇ.P
  src := by
    rintro _ _ _ (h | h)
    ¬∑ exact Or.inl (D‚ÇÅ.src h)
    ¬∑ exact Or.inr (D‚ÇÇ.src h)
  tgt := by
    rintro _ _ _ (h | h)
    ¬∑ exact Or.inl (D‚ÇÅ.tgt h)
    ¬∑ exact Or.inr (D‚ÇÇ.tgt h)
  hW := sorry
  hP := sorry

variable [IsCardinalFiltered J Œ∫]
  (hJ : ‚àÄ (e : J), ‚àÉ (m : J) (_ : e ‚ü∂ m), IsEmpty (m ‚ü∂ e))

include hJ in
lemma isCardinalFiltered : IsCardinalFiltered (Diagram J Œ∫) Œ∫ :=
  isCardinalFiltered_preorder _ _ (fun Œπ D hŒπ ‚Ü¶ by
    simp only [‚Üê hasCardinalLT_iff_cardinal_mk_lt] at hŒπ
    choose m‚ÇÄ t‚ÇÄ hm‚ÇÄ using fun i ‚Ü¶ hJ (D i).e
    let m‚ÇÅ := IsCardinalFiltered.max m‚ÇÄ hŒπ
    let t‚ÇÅ (i : Œπ) : m‚ÇÄ i ‚ü∂ m‚ÇÅ := IsCardinalFiltered.toMax m‚ÇÄ hŒπ i
    let u (i : Œπ) : (D i).e ‚ü∂ m‚ÇÅ := t‚ÇÄ i ‚â´ t‚ÇÅ i
    obtain ‚ü®m‚ÇÇ, t‚ÇÇ, hm‚ÇÇ‚ü© : ‚àÉ (m‚ÇÇ : J) (t‚ÇÇ : m‚ÇÅ ‚ü∂ m‚ÇÇ),
      ‚àÄ (i‚ÇÅ i‚ÇÇ : Œπ) (j : J) (hj‚ÇÅ : (D i‚ÇÅ).P j) (hj‚ÇÇ : (D i‚ÇÇ).P j),
        (D i‚ÇÅ).terminal.lift hj‚ÇÅ ‚â´ u i‚ÇÅ ‚â´ t‚ÇÇ = (D i‚ÇÇ).terminal.lift hj‚ÇÇ ‚â´ u i‚ÇÇ ‚â´ t‚ÇÇ := by
      sorry
    let œÜ (x : (Œ£ (i : Œπ), (Subtype (D i).P))) : x.2.1 ‚ü∂ m‚ÇÇ :=
      (D x.1).terminal.lift x.2.2 ‚â´ u x.1 ‚â´ t‚ÇÇ
    let D‚ÇÄ := PreDiagram.iSup (fun i ‚Ü¶ (D i).toPreDiagram) hŒπ
    have hD‚ÇÄ {i : Œπ} : ¬¨ (D i).P m‚ÇÇ := fun hi ‚Ü¶
      (hm‚ÇÄ i).false (t‚ÇÅ _ ‚â´ t‚ÇÇ ‚â´ (D i).terminal.lift hi)
    let D‚ÇÅ := D‚ÇÄ.max (.single m‚ÇÇ)
    let D‚ÇÇ : PreDiagram J Œ∫ :=
      { W := D‚ÇÅ.W ‚äî .ofHoms œÜ
        P := D‚ÇÅ.P
        src := by
          simp [D‚ÇÅ, D‚ÇÄ]
          rintro _ _ _ ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®i, j, hj‚ü©)
          ¬∑ simp at hf
            obtain ‚ü®i, hf‚ü© := hf
            exact Or.inl ‚ü®i, (D i).src hf‚ü©
          ¬∑ exact Or.inr rfl
          ¬∑ exact Or.inl ‚ü®i, hj‚ü©
        tgt := by
          simp [D‚ÇÅ, D‚ÇÄ]
          rintro _ _ _ ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®i, j, hj‚ü©)
          ¬∑ simp at hf
            obtain ‚ü®i, hf‚ü© := hf
            exact Or.inl ‚ü®i, (D i).tgt hf‚ü©
          ¬∑ exact Or.inr rfl
          ¬∑ exact Or.inr rfl
        hW := sorry
        hP := sorry }
    have hD‚ÇÇ {f : m‚ÇÇ ‚ü∂ m‚ÇÇ} (hf : D‚ÇÇ.W f) : f = ùüô _ := by
      simp [D‚ÇÇ, D‚ÇÅ, D‚ÇÄ] at hf
      obtain ((hf | ‚ü®‚ü®‚ü©‚ü©) | hf) := hf
      ¬∑ simp at hf
        obtain ‚ü®i, hi‚ü© := hf
        exact (hD‚ÇÄ ((D i).src hi)).elim
      ¬∑ rfl
      ¬∑ rw [MorphismProperty.ofHoms_iff] at hf
        obtain ‚ü®‚ü®i, j, hj‚ü©, hi‚ü© := hf
        obtain rfl : m‚ÇÇ = j := congr_arg Arrow.leftFunc.obj hi
        exact (hD‚ÇÄ hj).elim
    let he : D‚ÇÇ.Terminal m‚ÇÇ := by
      have H {i : Œπ} {j : J} (hj : (D i).P j) {f : j ‚ü∂ m‚ÇÇ} (hf : D‚ÇÇ.W f) :
          f = œÜ ‚ü®i, ‚ü®_, hj‚ü©‚ü© := by
        simp [D‚ÇÇ, D‚ÇÅ, D‚ÇÄ] at hf
        obtain ((hf | ‚ü®‚ü®‚ü©‚ü©) | ‚ü®‚ü®i', j, hj'‚ü©‚ü©) := hf
        ¬∑ simp at hf
          obtain ‚ü®i, hf‚ü© := hf
          exact (hD‚ÇÄ ((D i).tgt hf)).elim
        ¬∑ exact (hD‚ÇÄ hj).elim
        ¬∑ apply hm‚ÇÇ
      refine .ofExistsUnique ?_ ?_ ?_ ?_
      ¬∑ exact Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©)
      ¬∑ simp [D‚ÇÇ, D‚ÇÅ, D‚ÇÄ]
        rintro j (‚ü®i, hi‚ü© | rfl)
        ¬∑ exact ‚ü®œÜ ‚ü®i, _, hi‚ü©, Or.inr (.mk _)‚ü©
        ¬∑ exact ‚ü®ùüô _, Or.inl (Or.inr ‚ü®‚ü®‚ü©‚ü©)‚ü©
      ¬∑ intro j hj l‚ÇÅ l‚ÇÇ hl‚ÇÅ hl‚ÇÇ
        simp [D‚ÇÇ, D‚ÇÅ, D‚ÇÄ] at hj
        obtain (‚ü®i, hj‚ü© | rfl) := hj
        ¬∑ obtain rfl := H hj hl‚ÇÅ
          obtain rfl := H hj hl‚ÇÇ
          rfl
        ¬∑ rw [hD‚ÇÇ hl‚ÇÅ, hD‚ÇÇ hl‚ÇÇ]
      ¬∑ sorry
    let D‚ÇÇ' : Diagram J Œ∫ :=
      { toPreDiagram := D‚ÇÇ
        e := _
        terminal := he
        uniq_terminal j hj := by
          have := hj.prop
          simp [D‚ÇÇ, D‚ÇÅ, D‚ÇÄ] at this
          obtain (‚ü®i, hi‚ü© | rfl) := this
          ¬∑ exfalso
            exact (hm‚ÇÄ i).false (t‚ÇÅ _ ‚â´ t‚ÇÇ ‚â´ hj.lift
              (by simp [D‚ÇÇ, D‚ÇÅ]) ‚â´ (D i).terminal.lift hi)
          ¬∑ rfl }
    refine ‚ü®D‚ÇÇ', fun i ‚Ü¶ ‚ü®?_, ?_‚ü©‚ü©
    ¬∑ exact le_trans (le_trans (le_trans (by rfl) (le_iSup _ i))
        le_sup_left) le_sup_left
    ¬∑ exact le_trans (le_trans (by rfl) (le_iSup _ i)) le_sup_left)

end ExistsDirected

lemma exists_cardinal_directed [Fact Œ∫.IsRegular] [IsCardinalFiltered J Œ∫] :
    ‚àÉ (Œ± : Type w) (_ : PartialOrder Œ±) (_ : IsCardinalFiltered Œ± Œ∫)
      (F : Œ± ‚•§ J), F.Final := sorry

end IsCardinalFiltered

end CategoryTheory
