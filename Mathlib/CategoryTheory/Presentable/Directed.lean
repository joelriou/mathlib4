/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Presentable.IsCardinalFiltered
import Mathlib.CategoryTheory.MorphismProperty.Basic

/-!
# `Œ∫`-filtered categories and `Œ∫`-directed poset

-/

universe w

lemma hasCardinalLT_of_finite
    (X : Type*) [Finite X] (Œ∫ : Cardinal) (hŒ∫ : Cardinal.aleph0 ‚â§ Œ∫) :
    HasCardinalLT X Œ∫ := by
  exact HasCardinalLT.of_le (by rwa [hasCardinalLT_aleph0_iff]) hŒ∫

lemma hasCardinalLT_punit (Œ∫ : Cardinal) (hŒ∫ : Cardinal.aleph0 ‚â§ Œ∫) :
    HasCardinalLT PUnit Œ∫ :=
  hasCardinalLT_of_finite _ _ hŒ∫

namespace CategoryTheory

namespace IsCardinalFiltered

variable (J : Type w) [SmallCategory J] (Œ∫ : Cardinal.{w})

namespace ExistsDirected

@[ext]
structure PreDiagram where
  W : MorphismProperty J
  P : ObjectProperty J
  src {i j : J} {f : i ‚ü∂ j} : W f ‚Üí P i
  tgt {i j : J} {f : i ‚ü∂ j} : W f ‚Üí P j
  hW : HasCardinalLT W.toSet Œ∫
  hP : HasCardinalLT (Subtype P) Œ∫

namespace PreDiagram

variable {J Œ∫}

structure Terminal (D : PreDiagram J Œ∫) (e : J) where
  prop_id : D.W (ùüô e)
  lift {j : J} (hj : D.P j) : j ‚ü∂ e
  hlift {j : J} (hj : D.P j) : D.W (lift hj)
  uniq {j : J} (hj : D.P j) {œÜ : j ‚ü∂ e} (hœÜ : D.W œÜ) : lift hj = œÜ
  comm {i j : J} (f : i ‚ü∂ j) (hf : D.W f) : f ‚â´ lift (D.tgt hf) = lift (D.src hf)

namespace Terminal

attribute [reassoc] Terminal.comm

variable {D : PreDiagram J Œ∫} {e : J}

lemma prop (h : D.Terminal e) : D.P e := D.src (h.prop_id)

@[simp]
lemma lift_self (h : D.Terminal e) : h.lift h.prop = ùüô e := h.uniq _ h.prop_id

instance : Subsingleton (D.Terminal e) where
  allEq h‚ÇÅ h‚ÇÇ := by
    have : @h‚ÇÅ.lift = @h‚ÇÇ.lift := by
      ext j hj
      exact h‚ÇÅ.uniq hj (h‚ÇÇ.hlift hj)
    cases h‚ÇÅ
    cases h‚ÇÇ
    aesop

end Terminal

end PreDiagram

structure Diagram extends PreDiagram J Œ∫ where
  e : J
  terminal : toPreDiagram.Terminal e
  uniq_terminal (j : J) (hj : toPreDiagram.Terminal j) : j = e

@[ext]
lemma Diagram.ext {D‚ÇÅ D‚ÇÇ : Diagram J Œ∫} (hW : D‚ÇÅ.W = D‚ÇÇ.W) (hP : D‚ÇÅ.P = D‚ÇÇ.P) : D‚ÇÅ = D‚ÇÇ := by
  obtain ‚ü®D‚ÇÅ, e, h‚ÇÅ, h‚ÇÅ'‚ü© := D‚ÇÅ
  obtain ‚ü®D‚ÇÇ, e', h‚ÇÇ, h‚ÇÇ'‚ü© := D‚ÇÇ
  obtain rfl : D‚ÇÅ = D‚ÇÇ := by aesop
  obtain rfl : e = e' := h‚ÇÇ' _ h‚ÇÅ
  obtain rfl : h‚ÇÅ = h‚ÇÇ := by subsingleton
  rfl

instance : PartialOrder (Diagram J Œ∫) where
  le D‚ÇÅ D‚ÇÇ := D‚ÇÅ.W ‚â§ D‚ÇÇ.W ‚àß D‚ÇÅ.P ‚â§ D‚ÇÇ.P
  le_refl _ := ‚ü®by rfl, by rfl‚ü©
  le_trans _ _ _ h‚ÇÅ h‚ÇÇ := ‚ü®h‚ÇÅ.1.trans h‚ÇÇ.1, h‚ÇÅ.2.trans h‚ÇÇ.2‚ü©
  le_antisymm _ _ h‚ÇÅ h‚ÇÇ := by
    ext : 1
    ¬∑ exact le_antisymm h‚ÇÅ.1 h‚ÇÇ.1
    ¬∑ exact le_antisymm h‚ÇÅ.2 h‚ÇÇ.2

section

variable {J Œ∫}

def functorMap {D‚ÇÅ D‚ÇÇ : Diagram J Œ∫} (h : D‚ÇÅ ‚â§ D‚ÇÇ) : D‚ÇÅ.e ‚ü∂ D‚ÇÇ.e :=
  D‚ÇÇ.terminal.lift (h.2 _ D‚ÇÅ.terminal.prop)

@[simp]
lemma functorMap_id (D : Diagram J Œ∫) : functorMap (le_refl D) = ùüô D.e := by
  simp [functorMap]

@[reassoc (attr := simp)]
lemma functorMap_comp {D‚ÇÅ D‚ÇÇ D‚ÇÉ : Diagram J Œ∫} (h‚ÇÅ‚ÇÇ : D‚ÇÅ ‚â§ D‚ÇÇ) (h‚ÇÇ‚ÇÉ : D‚ÇÇ ‚â§ D‚ÇÉ) :
    functorMap h‚ÇÅ‚ÇÇ ‚â´ functorMap h‚ÇÇ‚ÇÉ = functorMap (h‚ÇÅ‚ÇÇ.trans h‚ÇÇ‚ÇÉ) :=
  D‚ÇÉ.terminal.comm _ (h‚ÇÇ‚ÇÉ.1 _ (D‚ÇÇ.terminal.hlift _))

end

@[simps]
def functor : Diagram J Œ∫ ‚•§ J where
  obj D := D.e
  map h := functorMap (leOfHom h)

variable [Fact Œ∫.IsRegular]

def PreDiagram.single (j : J) : PreDiagram J Œ∫ where
  W := .ofHoms (fun (_ : Unit) ‚Ü¶ ùüô j)
  P := .ofObj (fun (_ : Unit) ‚Ü¶ j)
  src := by rintro _ _ _ ‚ü®‚ü©; exact ‚ü®‚ü®‚ü©‚ü©
  tgt := by rintro _ _ _ ‚ü®‚ü©; exact ‚ü®‚ü®‚ü©‚ü©
  hW :=
    (hasCardinalLT_punit Œ∫ (Cardinal.IsRegular.aleph0_le Fact.out)).of_surjective
        (f := fun (_ : Unit) ‚Ü¶ ‚ü®Arrow.mk (ùüô j), ‚ü®‚ü®‚ü©‚ü©‚ü©) (by
      rintro ‚ü®f, hf‚ü©
      refine ‚ü®‚ü®‚ü©, ?_‚ü©
      ext
      exact ((MorphismProperty.ofHoms_iff _ _).1
        ((MorphismProperty.arrow_mk_mem_toSet_iff _ _).1 hf)).choose_spec.symm)
  hP :=
    (hasCardinalLT_punit Œ∫ (Cardinal.IsRegular.aleph0_le Fact.out)).of_surjective
      (f := fun (_ : Unit) ‚Ü¶ ‚ü®j, by simp‚ü©) (fun ‚ü®k, hk‚ü© ‚Ü¶ ‚ü®‚ü®‚ü©, by aesop‚ü©)

variable (hJ : ‚àÄ (e : J), (‚àÄ (j : J), Nonempty (j ‚ü∂ e)) ‚Üí False)

end ExistsDirected

end IsCardinalFiltered

end CategoryTheory
