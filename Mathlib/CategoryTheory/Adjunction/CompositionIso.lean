/-
Copyright (c) 2025 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.CategoryTheory.Adjunction.Mates

/-!
# Compatibilities for left adjoints from compatibilities satisfied by right adjoints

-/

namespace CategoryTheory

variable {C‚ÇÄ C‚ÇÅ C‚ÇÇ C‚ÇÉ : Type*} [Category C‚ÇÄ] [Category C‚ÇÅ] [Category C‚ÇÇ] [Category C‚ÇÉ]

open Functor

namespace Adjunction

section

variable
  {F‚ÇÄ‚ÇÅ : C‚ÇÄ ‚•§ C‚ÇÅ} {F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÇ} {F‚ÇÇ‚ÇÉ : C‚ÇÇ ‚•§ C‚ÇÉ} {F‚ÇÄ‚ÇÇ : C‚ÇÄ ‚•§ C‚ÇÇ} {F‚ÇÅ‚ÇÉ : C‚ÇÅ ‚•§ C‚ÇÉ} {F‚ÇÄ‚ÇÉ : C‚ÇÄ ‚•§ C‚ÇÉ}
  {G‚ÇÅ‚ÇÄ : C‚ÇÅ ‚•§ C‚ÇÄ} {G‚ÇÇ‚ÇÅ : C‚ÇÇ ‚•§ C‚ÇÅ} {G‚ÇÉ‚ÇÇ : C‚ÇÉ ‚•§ C‚ÇÇ} {G‚ÇÇ‚ÇÄ : C‚ÇÇ ‚•§ C‚ÇÄ} {G‚ÇÉ‚ÇÅ : C‚ÇÉ ‚•§ C‚ÇÅ} {G‚ÇÉ‚ÇÄ : C‚ÇÉ ‚•§ C‚ÇÄ}
  (adj‚ÇÄ‚ÇÅ : F‚ÇÄ‚ÇÅ ‚ä£ G‚ÇÅ‚ÇÄ) (adj‚ÇÅ‚ÇÇ : F‚ÇÅ‚ÇÇ ‚ä£ G‚ÇÇ‚ÇÅ) (adj‚ÇÇ‚ÇÉ : F‚ÇÇ‚ÇÉ ‚ä£ G‚ÇÉ‚ÇÇ) (adj‚ÇÄ‚ÇÇ : F‚ÇÄ‚ÇÇ ‚ä£ G‚ÇÇ‚ÇÄ)
  (adj‚ÇÅ‚ÇÉ : F‚ÇÅ‚ÇÉ ‚ä£ G‚ÇÉ‚ÇÅ) (adj‚ÇÄ‚ÇÉ : F‚ÇÄ‚ÇÉ ‚ä£ G‚ÇÉ‚ÇÄ)
  (e‚ÇÄ‚ÇÅ‚ÇÇ : G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÇ‚ÇÄ) (e‚ÇÅ‚ÇÇ‚ÇÉ : G‚ÇÉ‚ÇÇ ‚ãô G‚ÇÇ‚ÇÅ ‚âÖ G‚ÇÉ‚ÇÅ)
  (e‚ÇÄ‚ÇÅ‚ÇÉ : G‚ÇÉ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÉ‚ÇÄ) (e‚ÇÄ‚ÇÇ‚ÇÉ : G‚ÇÉ‚ÇÇ ‚ãô G‚ÇÇ‚ÇÄ ‚âÖ G‚ÇÉ‚ÇÄ)

@[simps! -isSimp]
def leftAdjointCompIso : F‚ÇÄ‚ÇÅ ‚ãô F‚ÇÅ‚ÇÇ ‚âÖ F‚ÇÄ‚ÇÇ :=
  (conjugateIsoEquiv adj‚ÇÄ‚ÇÇ (adj‚ÇÄ‚ÇÅ.comp adj‚ÇÅ‚ÇÇ)).symm e‚ÇÄ‚ÇÅ‚ÇÇ.symm

lemma leftAdjointCompIso‚ÇÄ‚ÇÅ‚ÇÉ_eq_conjugateIsoEquiv_symm :
    isoWhiskerLeft _ (leftAdjointCompIso adj‚ÇÅ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÅ‚ÇÉ e‚ÇÅ‚ÇÇ‚ÇÉ) ‚â™‚â´
      leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÉ adj‚ÇÄ‚ÇÉ e‚ÇÄ‚ÇÅ‚ÇÉ =
    (conjugateIsoEquiv adj‚ÇÄ‚ÇÉ (adj‚ÇÄ‚ÇÅ.comp (adj‚ÇÅ‚ÇÇ.comp adj‚ÇÇ‚ÇÉ))).symm
      (e‚ÇÄ‚ÇÅ‚ÇÉ.symm ‚â™‚â´ isoWhiskerRight e‚ÇÅ‚ÇÇ‚ÇÉ.symm G‚ÇÅ‚ÇÄ) := by
  ext X‚ÇÄ
  sorry

lemma leftAdjointCompIso‚ÇÄ‚ÇÇ‚ÇÉ_eq_conjugateIsoEquiv_symm :
    (associator _ _ _).symm ‚â™‚â´
        isoWhiskerRight (leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÄ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ) F‚ÇÇ‚ÇÉ ‚â™‚â´
          leftAdjointCompIso adj‚ÇÄ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÄ‚ÇÉ e‚ÇÄ‚ÇÇ‚ÇÉ =
    (conjugateIsoEquiv adj‚ÇÄ‚ÇÉ (adj‚ÇÄ‚ÇÅ.comp (adj‚ÇÅ‚ÇÇ.comp adj‚ÇÇ‚ÇÉ))).symm
      (e‚ÇÄ‚ÇÇ‚ÇÉ.symm ‚â™‚â´ isoWhiskerLeft G‚ÇÉ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ.symm ‚â™‚â´ (associator _ _ _).symm) := by
  sorry

lemma leftAdjointCompIso_assoc
    (h : isoWhiskerLeft G‚ÇÉ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ ‚â™‚â´ e‚ÇÄ‚ÇÇ‚ÇÉ =
      (associator _ _ _).symm ‚â™‚â´ isoWhiskerRight e‚ÇÅ‚ÇÇ‚ÇÉ _ ‚â™‚â´ e‚ÇÄ‚ÇÅ‚ÇÉ) :
    isoWhiskerLeft _ (leftAdjointCompIso adj‚ÇÅ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÅ‚ÇÉ e‚ÇÅ‚ÇÇ‚ÇÉ) ‚â™‚â´
        leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÉ adj‚ÇÄ‚ÇÉ e‚ÇÄ‚ÇÅ‚ÇÉ =
      (associator _ _ _).symm ‚â™‚â´
        isoWhiskerRight (leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÄ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ) F‚ÇÇ‚ÇÉ ‚â™‚â´
          leftAdjointCompIso adj‚ÇÄ‚ÇÇ adj‚ÇÇ‚ÇÉ adj‚ÇÄ‚ÇÉ e‚ÇÄ‚ÇÇ‚ÇÉ := by
  rw [leftAdjointCompIso‚ÇÄ‚ÇÅ‚ÇÉ_eq_conjugateIsoEquiv_symm,
    leftAdjointCompIso‚ÇÄ‚ÇÇ‚ÇÉ_eq_conjugateIsoEquiv_symm]
  congr 1
  ext X‚ÇÉ
  simpa using congr_app (congr_arg Iso.inv h.symm) X‚ÇÉ

end

section

variable {F‚ÇÄ‚ÇÅ : C‚ÇÄ ‚•§ C‚ÇÄ} {G‚ÇÅ‚ÇÄ : C‚ÇÄ ‚•§ C‚ÇÄ} (adj : F‚ÇÄ‚ÇÅ ‚ä£ G‚ÇÅ‚ÇÄ) (e‚ÇÅ‚ÇÄ : G‚ÇÅ‚ÇÄ ‚âÖ ùü≠ C‚ÇÄ)

@[simps! -isSimp]
def leftAdjointIdIso : F‚ÇÄ‚ÇÅ ‚âÖ ùü≠ C‚ÇÄ := (conjugateIsoEquiv .id adj).symm e‚ÇÅ‚ÇÄ.symm

end

lemma leftAdjointCompIso_comp_id
    {F‚ÇÄ‚ÇÅ : C‚ÇÄ ‚•§ C‚ÇÅ} {F‚ÇÅ‚ÇÇ : C‚ÇÅ ‚•§ C‚ÇÅ} {G‚ÇÅ‚ÇÄ : C‚ÇÅ ‚•§ C‚ÇÄ} {G‚ÇÇ‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÅ}
    (adj‚ÇÄ‚ÇÅ : F‚ÇÄ‚ÇÅ ‚ä£ G‚ÇÅ‚ÇÄ) (adj‚ÇÅ‚ÇÇ : F‚ÇÅ‚ÇÇ ‚ä£ G‚ÇÇ‚ÇÅ)
    (e‚ÇÄ‚ÇÅ‚ÇÇ : G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÅ‚ÇÄ) (e‚ÇÇ‚ÇÅ : G‚ÇÇ‚ÇÅ ‚âÖ ùü≠ _)
    (h : e‚ÇÄ‚ÇÅ‚ÇÇ = isoWhiskerRight e‚ÇÇ‚ÇÅ G‚ÇÅ‚ÇÄ ‚â™‚â´ leftUnitor G‚ÇÅ‚ÇÄ) :
    leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÄ‚ÇÅ e‚ÇÄ‚ÇÅ‚ÇÇ =
      isoWhiskerLeft _ (leftAdjointIdIso adj‚ÇÅ‚ÇÇ e‚ÇÇ‚ÇÅ) ‚â™‚â´ rightUnitor F‚ÇÄ‚ÇÅ := by
  subst h
  ext X‚ÇÄ
  simp [leftAdjointCompIso_hom_app, leftAdjointIdIso_hom_app,
    ‚Üê Functor.map_comp_assoc, -Functor.map_comp]

lemma leftAdjointCompIso_id_comp
    {F‚ÇÄ‚ÇÅ : C‚ÇÄ ‚•§ C‚ÇÄ} {F‚ÇÅ‚ÇÇ : C‚ÇÄ ‚•§ C‚ÇÅ} {G‚ÇÅ‚ÇÄ : C‚ÇÄ ‚•§ C‚ÇÄ} {G‚ÇÇ‚ÇÅ : C‚ÇÅ ‚•§ C‚ÇÄ}
    (adj‚ÇÄ‚ÇÅ : F‚ÇÄ‚ÇÅ ‚ä£ G‚ÇÅ‚ÇÄ) (adj‚ÇÅ‚ÇÇ : F‚ÇÅ‚ÇÇ ‚ä£ G‚ÇÇ‚ÇÅ)
    (e‚ÇÄ‚ÇÅ‚ÇÇ : G‚ÇÇ‚ÇÅ ‚ãô G‚ÇÅ‚ÇÄ ‚âÖ G‚ÇÇ‚ÇÅ) (e‚ÇÅ‚ÇÄ : G‚ÇÅ‚ÇÄ ‚âÖ ùü≠ _)
    (h : e‚ÇÄ‚ÇÅ‚ÇÇ = isoWhiskerLeft G‚ÇÇ‚ÇÅ e‚ÇÅ‚ÇÄ ‚â™‚â´ rightUnitor G‚ÇÇ‚ÇÅ) :
    leftAdjointCompIso adj‚ÇÄ‚ÇÅ adj‚ÇÅ‚ÇÇ adj‚ÇÅ‚ÇÇ e‚ÇÄ‚ÇÅ‚ÇÇ =
      isoWhiskerRight (leftAdjointIdIso adj‚ÇÄ‚ÇÅ e‚ÇÅ‚ÇÄ) F‚ÇÅ‚ÇÇ ‚â™‚â´ leftUnitor F‚ÇÅ‚ÇÇ := by
  subst h
  ext X‚ÇÄ
  have h‚ÇÅ := congr_map F‚ÇÅ‚ÇÇ (adj‚ÇÄ‚ÇÅ.counit.naturality (adj‚ÇÅ‚ÇÇ.unit.app X‚ÇÄ))
  have h‚ÇÇ := congr_map (F‚ÇÄ‚ÇÅ ‚ãô F‚ÇÅ‚ÇÇ) (e‚ÇÅ‚ÇÄ.inv.naturality (adj‚ÇÅ‚ÇÇ.unit.app X‚ÇÄ))
  simp only [id_obj, comp_obj, Functor.id_map, Functor.comp_map, Functor.map_comp] at h‚ÇÅ h‚ÇÇ
  simp [leftAdjointCompIso_hom_app, leftAdjointIdIso_hom_app,
    reassoc_of% h‚ÇÇ, reassoc_of% h‚ÇÅ]

end Adjunction

end CategoryTheory
